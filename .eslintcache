[{"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\App.js":"1","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\store\\middlewares\\logger.js":"2","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\shared-components\\footer\\Footer.js":"3","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterContainer.js":"4","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\store\\actions\\loading.js":"5","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\home\\movie-container\\components\\MovieCarousel.js":"6","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\utils\\api.js":"7","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\myBookings\\bookingHistory\\BookingHistory.js":"8","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\shared-components\\error\\Error.js":"9","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\home\\movie-container\\MovieContainer.js":"10","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\store\\actions\\city.js":"11","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\movie\\Movie.js":"12","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\store\\reducers\\seatsAndPrice.js":"13","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\store\\reducers\\loading.js":"14","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\purchase\\payment-form\\PaymentForm.js":"15","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterCard.js":"16","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\movie\\movie-details\\MovieDetails.js":"17","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\shared-components\\ticket\\Ticket.js":"18","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\home\\movie-container\\components\\MovieCard.js":"19","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\profile\\Profile.js":"20","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\myBookings\\MyBookings.js":"21","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\screen\\Screen.js":"22","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\signupandforgotpwd\\ForgotPassword.js":"23","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\home\\City.js":"24","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\purchase\\Purchase.js":"25","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\shared-components\\header\\Header.js":"26"},{"size":2483,"mtime":1608277365198,"results":"27","hashOfConfig":"28"},{"size":297,"mtime":1606720415312,"results":"29","hashOfConfig":"28"},{"size":3154,"mtime":1608185715777,"results":"30","hashOfConfig":"28"},{"size":7226,"mtime":1608039576030,"results":"31","hashOfConfig":"28"},{"size":140,"mtime":1607658841618,"results":"32","hashOfConfig":"28"},{"size":1079,"mtime":1608272233779,"results":"33","hashOfConfig":"28"},{"size":6727,"mtime":1608292330651,"results":"34","hashOfConfig":"28"},{"size":2024,"mtime":1608284901284,"results":"35","hashOfConfig":"28"},{"size":908,"mtime":1607591429284,"results":"36","hashOfConfig":"28"},{"size":4388,"mtime":1608266394741,"results":"37","hashOfConfig":"28"},{"size":209,"mtime":1608122047887,"results":"38","hashOfConfig":"28"},{"size":1004,"mtime":1607923594700,"results":"39","hashOfConfig":"28"},{"size":322,"mtime":1607407786611,"results":"40","hashOfConfig":"28"},{"size":200,"mtime":1607658841622,"results":"41","hashOfConfig":"28"},{"size":6016,"mtime":1608122047879,"results":"42","hashOfConfig":"28"},{"size":9744,"mtime":1608195754152,"results":"43","hashOfConfig":"28"},{"size":2754,"mtime":1607955088392,"results":"44","hashOfConfig":"28"},{"size":5409,"mtime":1608292554980,"results":"45","hashOfConfig":"28"},{"size":2842,"mtime":1608282496407,"results":"46","hashOfConfig":"28"},{"size":14090,"mtime":1608185960742,"results":"47","hashOfConfig":"28"},{"size":4082,"mtime":1608284755410,"results":"48","hashOfConfig":"28"},{"size":11685,"mtime":1608188051096,"results":"49","hashOfConfig":"28"},{"size":9138,"mtime":1607674649339,"results":"50","hashOfConfig":"28"},{"size":1954,"mtime":1608197476549,"results":"51","hashOfConfig":"28"},{"size":6586,"mtime":1608122047878,"results":"52","hashOfConfig":"28"},{"size":10174,"mtime":1608277394529,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7vr4j6",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\App.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\store\\middlewares\\logger.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\shared-components\\footer\\Footer.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterContainer.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\store\\actions\\loading.js",[],["111","112"],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\home\\movie-container\\components\\MovieCarousel.js",["113"],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\utils\\api.js",["114","115","116"],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\myBookings\\bookingHistory\\BookingHistory.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\shared-components\\error\\Error.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\home\\movie-container\\MovieContainer.js",["117"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { setMovieAndTheaterList } from '../../../store/actions/shared';\r\nimport { Redirect } from 'react-router-dom';\r\nimport MovieCard from './components/MovieCard'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport { GridListTile } from '@material-ui/core';\r\nimport MovieCarousel from './components/MovieCarousel'\r\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\r\nimport Loader from \"../../../shared-components/Loader\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { header } from '../../../theme'\r\nimport { Divider } from '@material-ui/core';\r\n\r\nconst styles = (theme) => ({\r\n\ttitle: {\r\n\t\tfontWeight: 'bold'\r\n\t}, \r\n\ttile : {\r\n\t\tmargin: 25, \r\n\t\tpadding: 10\r\n\t},\r\n\tlistContainer: {\r\n\t\tflexWrap: 'wrap',\r\n\t\toverflowY: 'inherit',\r\n\t\tjustifyContent: 'center'\r\n\t},\r\n\tcardListItem: {\r\n\t\tmargin: '0.5em', \r\n\t\tboxShadow: '0 4px 8px 0 rgba(0,0,0,0.4)', \r\n\t\tpadding: 0 ,\r\n\t\theight: 'auto !important',\r\n\t\tborderRadius: '15px'\r\n\t}\r\n})\r\n\r\n\r\nclass MovieContainer extends Component {\r\n\tstate = {\r\n\t\tredirect: false\r\n\t}\r\n\r\n\t\r\n\thandleSelectedMovie = (movie) => {\r\n\t\tconst { dispatch } = this.props;\r\n\t\tdispatch(setMovieAndTheaterList(movie, true));\r\n\t\tthis.setState({\r\n\t\t\tredirect: true\r\n\t\t})\r\n\t\t// dispatch movie object and theatersList to store\r\n\t\t// setstate to true\r\n\t\t// navigate to moviepage\t\r\n\t}\r\n\r\n\tgetGridListCols = () => {\r\n\t\tif (isWidthUp('xl', this.props.width)) {\r\n\t\t\treturn 5;\r\n\t\t}\r\n\r\n\t\tif (isWidthUp('lg', this.props.width)) {\r\n\t\t\treturn 4;\r\n\t\t}\r\n\r\n\t\tif (isWidthUp('md', this.props.width)) {\r\n\t\t\treturn 3;\r\n\t\t}\r\n\r\n\t\tif (isWidthUp('sm', this.props.width)) {\r\n\t\t\treturn 2;\r\n\t\t}\r\n\r\n\t\treturn 1;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { moviesList, classes } = this.props;\r\n\t\tconst { response, exception } = moviesList;\r\n\r\n\t\treturn (\r\n\t\t\t(Object.keys(moviesList).length !== 0 ?\r\n\t\t\t\t((exception === null ?\r\n\t\t\t\t\t(this.state.redirect ? (<Redirect to={{ pathname: '/movie' }} />) : (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t\t\t<MovieCarousel moviesList={moviesList.response} handleSelectedMovie={this.handleSelectedMovie} />\r\n\t\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t\t\t<div style={{width:'75%', margin:'auto'}}><Divider variant=\"middle\"/></div>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<div className={classes.tile}>\r\n\t\t\t\t\t\t\t\t<Typography gutterBottom variant=\"h5\" component=\"h2\" className={classes.title} >\r\n\t\t\t\t\t\t\t\t\tCurrently Running\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t{(response.filter(movie => new Date(movie.dateReleased) < new Date()).length > 0 ?\r\n\t\t\t\t\t\t\t\t\t<GridList className={classes.listContainer} cols={this.getGridListCols()} spacing={0}>\r\n\t\t\t\t\t\t\t\t\t\t{response.filter(movie => new Date(movie.dateReleased) < new Date()).map(movie =>\r\n\t\t\t\t\t\t\t\t\t\t\t<GridListTile key={movie.movieId} className={classes.cardListItem}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<MovieCard movie={movie} handleSelectedMovie={this.handleSelectedMovie} style={{height:'auto'}}/>\r\n\t\t\t\t\t\t\t\t\t\t\t</GridListTile>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</GridList>\r\n\t\t\t\t\t\t\t\t\t: <Typography variant=\"h6\" style={{margin:'15px'}}>No movies available at this time</Typography>)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div style={{width:'75%', margin:'auto'}}><Divider variant=\"middle\"/></div>\r\n\t\t\t\t\t\t\t<div className={classes.tile}>\r\n\t\t\t\t\t\t\t\t<Typography gutterBottom variant=\"h5\" component=\"h2\" className={classes.title} >\r\n\t\t\t\t\t\t\t\t\tUpcoming Movies\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t{(response.filter(movie => new Date(movie.dateReleased) > new Date()).length > 0 ?\r\n\t\t\t\t\t\t\t\t\t<GridList className={classes.listContainer} cols={this.getGridListCols()} spacing={0}>\r\n\t\t\t\t\t\t\t\t\t\t{response.filter(movie => new Date(movie.dateReleased) > new Date()).map(movie =>\r\n\t\t\t\t\t\t\t\t\t\t\t<GridListTile key={movie.movieId} className={classes.cardListItem}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<MovieCard movie={movie} handleSelectedMovie={this.handleSelectedMovie} />\r\n\t\t\t\t\t\t\t\t\t\t\t</GridListTile>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</GridList>\r\n\t\t\t\t\t\t\t\t\t: <Typography variant=\"h6\" style={{margin:'15px'}}>No movies available at this time</Typography>)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>))\r\n\t\t\t\t\t: <Redirect to={{\r\n\t\t\t\t\t\tpathname: '/error',\r\n\t\t\t\t\t\tstate: {\r\n\t\t\t\t\t\t\texception: exception\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}} />))\r\n\t\t\t\t: <Loader />)\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps({ moviesList }) {\r\n\treturn {\r\n\t\tmoviesList\r\n\t}\r\n}\r\n\r\nexport default withStyles(styles)(withWidth()(connect(mapStateToProps)(MovieContainer)))","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\store\\actions\\city.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\movie\\Movie.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\store\\reducers\\seatsAndPrice.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\store\\reducers\\loading.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\purchase\\payment-form\\PaymentForm.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterCard.js",["118","119"],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\movie\\movie-details\\MovieDetails.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\shared-components\\ticket\\Ticket.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\home\\movie-container\\components\\MovieCard.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\profile\\Profile.js",["120"],"import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport MuiPhoneNumber from \"material-ui-phone-number\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\r\nimport { getProfile } from \"../../utils/api\";\r\nimport { uploadImage } from \"../../utils/api\";\r\nimport { updateProfile } from \"../../utils/api\";\r\nimport { userProfilePhoto } from '../../config/apiConfig'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Loader from \"../../shared-components/Loader\";\r\nimport Footer from \"../../shared-components/footer/Footer\"\r\n\r\n\r\n\r\nconst styles = (theme) => ({\r\n  profileInfoDiv: {\r\n    width: \"100vw\",\r\n    height: \"30vh\",\r\n    backgroundColor: \"grey\",\r\n  },\r\n  paper: {\r\n    paddingTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    margin: \"50px\",\r\n  },\r\n  cardStyle: {\r\n    minWidth: \"70vw\",\r\n    margin: '30px 0',\r\n    backgroundColor: \"#ECEFF1\"\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    height: 45,\r\n    borderRadius: 0\r\n  },\r\n\r\n  imageContainer: {\r\n    minWidth: \"100%\",\r\n    backgroundColor: \"#0A3D62\",\r\n    minHeight: \"30vh\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  cameraIcon: {\r\n    position: \"absolute\",\r\n    top: \"75%\",\r\n    right: \"-20px\",\r\n    size: 20,\r\n    backgroundColor: \"#d81b60\",\r\n    padding: \"9px\",\r\n  },\r\n\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  profileImg: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    padding: \"2px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  userIcon: {\r\n    color: \"grey\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  successMessageColor: {\r\n    color: \"green\",\r\n  },\r\n  failedMessageColor: {\r\n    color: \"red\",\r\n  },\r\n  loadingPanel: {\r\n    minHeight: \"100vh\",\r\n    minWidth: \"100vw\",\r\n    zIndex: 100,\r\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n\r\nclass Profile extends Component {\r\n  state = {\r\n    fnameIsValid: true,\r\n    lnameIsValid: true,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n    birthday: \"\",\r\n    imageUrl: null,\r\n    infoMessage: \"\",\r\n    loadProfileMessage: \"\",\r\n    imageUploadErrorMessage: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    getProfile().then((res) => {\r\n      if (res.status === 200) {\r\n        let userProfile = res.response;\r\n        const birthday = this.formatDate(userProfile.dateOfBirth);\r\n        this.setState({\r\n          loading: false,\r\n          loadProfileMessage: \"\",\r\n          firstName: userProfile.fullName.split(\" \")[0],\r\n          lastName: userProfile.fullName.split(\" \")[1],\r\n          email: userProfile.email,\r\n          phone: userProfile.phoneNumber,\r\n          birthday: birthday,\r\n          imageUrl: userProfile.imageUrl,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          loading: false,\r\n          loadProfileMessage: res.exception.errorMsg,\r\n        });\r\n      }\r\n    });\r\n  }\r\n  validateName = (event) => {\r\n    const field = event.target.name;\r\n    const name = event.target.value;\r\n    if (field === \"firstName\") {\r\n      if (!(name.match(/^[A-Za-z]+$/) || name === \"\"))\r\n        this.setState({\r\n          firstName: name,\r\n          fnameIsValid: false,\r\n        });\r\n      else\r\n        this.setState({\r\n          firstName: name,\r\n          fnameIsValid: true,\r\n        });\r\n    } else {\r\n      if (!(name.match(/^[A-Za-z]+$/) || name === \"\"))\r\n        this.setState({\r\n          lastName: name,\r\n          lnameIsValid: false,\r\n        });\r\n      else\r\n        this.setState({\r\n          lastName: name,\r\n          lnameIsValid: true,\r\n        });\r\n    }\r\n  };\r\n\r\n  onImageUpload = (event) => {\r\n    console.log(\"onImageupload called\");\r\n    const imageObj = event.target.files[0];\r\n    // Create an object of formData\r\n    const formData = new FormData();\r\n\r\n    // Update the formData object\r\n    formData.append(\"profilePhoto\", imageObj);\r\n\r\n    uploadImage(formData).then((res) => {\r\n      if (res.status === 200) {\r\n        const imageUrl = res.response.imageUrl;\r\n        this.setState({\r\n          imageUploadErrorMessage: \"\",\r\n          imageUrl,\r\n        });\r\n      } else\r\n        this.setState({\r\n          imageUploadErrorMessage: res.exception.errorMsg,\r\n        });\r\n    });\r\n  };\r\n\r\n  formatDate = (date) => {\r\n    let d = new Date(date),\r\n      month = \"\" + (d.getMonth() + 1),\r\n      day = \"\" + d.getDate(),\r\n      year = d.getFullYear();\r\n\r\n    if (month.length < 2) month = \"0\" + month;\r\n    if (day.length < 2) day = \"0\" + day;\r\n\r\n    return [year, month, day].join(\"-\");\r\n  };\r\n  //   validatePhone = (event) => {\r\n  //     const phone = event.target.value;\r\n  //     console.log(phone.length)  //15 for india\r\n  //   };\r\n\r\n  setBirthday = (event) => {\r\n    const birthday = event.target.value;\r\n    this.setState({\r\n      birthday,\r\n    });\r\n  };\r\n\r\n  setPhone = (event) => {\r\n    const phone = event.target.value;\r\n    this.setState({\r\n      phone,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"handleSubmit clicked\");\r\n    const {\r\n      fnameIsValid,\r\n      lnameIsValid,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n      birthday,\r\n      imageUrl,\r\n    } = this.state;\r\n    if (fnameIsValid === true && lnameIsValid === true) {\r\n      console.log(\"all fields contains valid inputs\");\r\n      this.setState({\r\n        loading: true,\r\n      });\r\n      let userInfo = {\r\n        fullName: `${firstName} ${lastName}`,\r\n        email,\r\n        phoneNumber: phone,\r\n        dateOfBirth: birthday,\r\n        imageUrl,\r\n      };\r\n      updateProfile(userInfo).then((res) => {\r\n        if (res.status === 200)\r\n          this.setState({\r\n            infoMessage: \"Profile Updated Successfully\",\r\n            loading: false,\r\n          });\r\n        else\r\n          this.setState({\r\n            infoMessage: res.exception.errorMsg,\r\n            loading: false,\r\n          });\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const {\r\n      fnameIsValid,\r\n      lnameIsValid,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n      birthday,\r\n      imageUrl,\r\n      infoMessage,\r\n      imageUploadErrorMessage,\r\n      loadProfileMessage,\r\n      loading,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n      {loading && <Loader />}\r\n        <Container className={classes.imageContainer}>\r\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            {imageUploadErrorMessage !== \"\" && (\r\n              <Typography\r\n                style={{ marginTop: 5, marginBottom: 5 }}\r\n                className={classes.failedMessageColor}\r\n              >\r\n                {imageUploadErrorMessage}\r\n              </Typography>\r\n            )}\r\n\r\n            <input\r\n              accept=\"image/*\"\r\n              className={classes.input}\r\n              id=\"icon-button-file\"\r\n              type=\"file\"\r\n              onChange={this.onImageUpload}\r\n            />\r\n            {imageUrl === null ? (\r\n              <div\r\n                style={{ position: \"relative\", width: 100, marginBottom: 20 }}\r\n              >\r\n                <FontAwesomeIcon\r\n                  icon={faUser}\r\n                  size=\"7x\"\r\n                  className={classes.userIcon}\r\n                />\r\n\r\n                <label htmlFor=\"icon-button-file\">\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    className={classes.cameraIcon}\r\n                    component=\"span\"\r\n                  >\r\n                    <PhotoCamera />\r\n                  </IconButton>\r\n                </label>\r\n              </div>\r\n            ) : (\r\n                <div style={{ position: \"relative\", width: 110, height: 110, marginBottom: 10 }}>\r\n                  <img\r\n                    src={userProfilePhoto + imageUrl}\r\n                    alt=\"profile image\"\r\n                    className={classes.profileImg}\r\n                  />\r\n\r\n                  <label htmlFor=\"icon-button-file\">\r\n                    <IconButton\r\n                      color=\"primary\"\r\n                      className={classes.cameraIcon}\r\n                      component=\"span\"\r\n                    >\r\n                      <PhotoCamera />\r\n                    </IconButton>\r\n                  </label>\r\n                </div>\r\n              )}\r\n          </div>\r\n\r\n          <Typography variant=\"h5\" style={{ color: \"white\", marginRight: 20 }}>\r\n            Welcome {firstName}! 😊\r\n          </Typography>\r\n        </Container>\r\n        <Container\r\n          className={classes.cardStyle}\r\n          component=\"main\"\r\n          maxWidth=\"xs\"\r\n        >\r\n          <CssBaseline />\r\n          <Grid container justify=\"center\">\r\n            <div className={classes.paper}>\r\n              {loadProfileMessage !== \"\" && (\r\n                <Typography className={classes.failedMessageColor}>\r\n                  {loadProfileMessage}\r\n                </Typography>\r\n              )}\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                My Profile\r\n              </Typography>\r\n              <form className={classes.form} onSubmit={this.handleSubmit}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      autoComplete=\"fname\"\r\n                      name=\"firstName\"\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"firstName\"\r\n                      label=\"First Name\"\r\n                      value={firstName}\r\n                      error={fnameIsValid ? false : true}\r\n                      helperText={\r\n                        fnameIsValid ? \"\" : \"Should contain only alphabets\"\r\n                      }\r\n                      onChange={this.validateName}\r\n                      autoFocus\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      name=\"lastName\"\r\n                      value={lastName}\r\n                      autoComplete=\"lname\"\r\n                      error={lnameIsValid ? false : true}\r\n                      helperText={\r\n                        lnameIsValid ? \"\" : \"Should contain only alphabets\"\r\n                      }\r\n                      onChange={this.validateName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      disabled\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email Address\"\r\n                      name=\"email\"\r\n                      value={email}\r\n                      type=\"email\"\r\n                      autoComplete=\"email\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <MuiPhoneNumber\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"phone\"\r\n                      label=\"Mobile Number\"\r\n                      name=\"phone\"\r\n                      value={phone}\r\n                      defaultCountry={\"in\"}\r\n                      autoComplete=\"phone\"\r\n                      onBlur={this.setPhone}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"date\"\r\n                      label=\"Birthday\"\r\n                      name=\"date\"\r\n                      value={birthday}\r\n                      type=\"date\"\r\n                      autoComplete=\"date\"\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                      onChange={this.setBirthday}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                >\r\n                  Update Changes\r\n                </Button>\r\n\r\n                <Grid container justify=\"flex-start\">\r\n                  <Grid item>\r\n                    <Typography\r\n                      className={\r\n                        infoMessage.includes(\"Successfully\")\r\n                          ? classes.successMessageColor\r\n                          : classes.failedMessageColor\r\n                      }\r\n                    >\r\n                      {infoMessage}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item>\r\n                    <Link to=\"/\">Proceed to home</Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            </div>\r\n          </Grid>\r\n        </Container>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Profile);\r\n","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\myBookings\\MyBookings.js",["121"],"import React, { Component } from 'react'\r\nimport BookingHistory from './bookingHistory/BookingHistory'\r\nimport Header from '../../shared-components/header/Header'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport {Tabs, Tab, Typography} from '@material-ui/core';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {getAllBookings, cancelBooking} from '../../utils/api'\r\nimport { header, headerText} from '../../theme'\r\nimport Footer from '../../shared-components/footer/Footer'\r\n\r\nexport default class MyBookings extends Component {\r\n    state = {\r\n        value: 0,\r\n        upcomingBookings: [],\r\n        previousBookings: [],\r\n        exception: null,\r\n        cancel: false,\r\n        open: false\r\n    }\r\n    cancelTicket = (bookingId) => {\r\n        cancelBooking(bookingId).then((response) => {\r\n            if(response.exception === null) {\r\n                this.setState((previousState) => {\r\n                    return {\r\n                    ...previousState,\r\n                    upcomingBookings: previousState.upcomingBookings\r\n                        .filter((booking)=> booking.bookingId !== response.response.bookingId).concat([response.response])\r\n                    };\r\n            })\r\n            } else {\r\n                this.setState({\r\n                    exception: response.exception\r\n            })\r\n        }\r\n        })\r\n        \r\n    }\r\n\r\n    handleClose = (cancel, bookingId) => {\r\n        if (cancel) {\r\n            this.cancelTicket(bookingId)\r\n        }\r\n        this.setState({\r\n            open: false,\r\n            cancel\r\n        })\r\n    };\r\n\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({\r\n            open: true,\r\n        })\r\n    };\r\n\r\n    componentDidMount() {\r\n        getAllBookings()\r\n        .then(response => {\r\n            if(response.exception === null) {\r\n                const previous = response.response.filter(ticket => ticket.dateOfShow.split('T')[0] < new Date().toISOString().split('T')[0]);\r\n                const upcoming = response.response.filter(ticket => ticket.dateOfShow.split('T')[0] > new Date().toISOString().split('T')[0]);\r\n                this.setState({\r\n                    previousBookings: previous,\r\n                    upcomingBookings: upcoming\r\n                    })\r\n            }\r\n        else{\r\n            this.setState({\r\n                exception: response.exception\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\n    handleChange = (event, value) => {\r\n        this.setState({ value });\r\n    };\r\n\r\n    \r\n    \r\n    render() {\r\n        const {value, exception} = this.state;\r\n        return (\r\n            (exception === null ?\r\n        (<React.Fragment>\r\n            <Header/>\r\n                <AppBar position=\"static\" style={{backgroundColor: headerText, color: header}}>\r\n                    <Tabs value={value} onChange={this.handleChange} \r\n                            TabIndicatorProps={{\r\n                                style: {\r\n                                  backgroundColor: header}\r\n                              }}\r\n                            fullwidth=\"true\"\r\n                            aria-label=\"simple tabs example\">\r\n                        <Tab label=\"Upcoming Bookings\" id=\"upcomingBookingsTabPanel\"\r\n                                aria-controls=\"upcomingBookingsTabPanel\"/>\r\n                        <Tab label=\"Previous Bookings\" id=\"bookingHistoryTabPanel\"\r\n                                aria-controls=\"bookingHistoryTabPanel\"/>\r\n                    </Tabs>\r\n                </AppBar>\r\n                    {value===0 && <BookingHistory bookings={this.state.upcomingBookings} \r\n                                                open={this.state.open} handleClose={this.handleClose}\r\n                                                handleClickOpen={this.handleClickOpen}/>}\r\n                    {value===1 && <BookingHistory bookings={this.state.previousBookings}/>}\r\n                <Footer />\r\n        </React.Fragment>) \r\n        : <Redirect to={{pathname:'/error',\r\n\t\t\t\t\t\t\t\tstate:{\r\n\t\t\t\t\t\t\t\t\texception:exception\r\n\t\t\t\t\t\t\t\t}}} /> )\r\n        );\r\n    }\r\n}\r\n\r\n","C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\screen\\Screen.js",["122","123"],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\signupandforgotpwd\\ForgotPassword.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\home\\City.js",[],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\containers\\purchase\\Purchase.js",["124"],"C:\\Users\\shunm\\X-Corps_AWS_Workspace\\movie-booking-co\\src\\shared-components\\header\\Header.js",["125"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { header, headerText } from '../../theme'\r\nimport { AppBar, Toolbar, Avatar, Typography } from '@material-ui/core'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { setCityAndMoviesList, setMovieAndTheaterList } from '../../store/actions/shared'\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport clsx from 'clsx';\r\nimport { userProfilePhoto } from '../../config/apiConfig'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ConfirmationNumberIcon from '@material-ui/icons/ConfirmationNumber';\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport '../../../src/index.css'\r\nimport { handleLogoutUser } from \"../../store/actions/authedUser\"\r\nimport Loader from \"../Loader\"\r\n\r\nconst drawerWidth = 240;\r\nconst styles = (theme) => ({\r\n    logo: {\r\n        height: 80,\r\n        width: 300\r\n    },\r\n    color: {\r\n        backgroundColor: header,\r\n        color: headerText\r\n    },\r\n    toolBar: {\r\n        justifyContent: 'space-between'\r\n    },\r\n    leftDiv: {\r\n        justifyContent: 'space-around',\r\n        width: '35%',\r\n        padding: '10px',\r\n        alignItems: 'center',\r\n        margin: '10px',\r\n        display: 'flex',\r\n        flexDirection: 'row'\r\n    },\r\n    userName: {\r\n        flexDirection: 'column',\r\n        display: 'contents'\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginRight: drawerWidth,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-start',\r\n        backgroundColor: header,\r\n        color: headerText,\r\n        height: '95px'\r\n    },\r\n    select: {\r\n        color: headerText,\r\n        '&:before': {\r\n            borderColor: headerText,\r\n        },\r\n        '&:after': {\r\n            borderColor: headerText,\r\n        }\r\n    },\r\n    icon: {\r\n        fill: headerText,\r\n    },\r\n})\r\n\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        open: false,\r\n    }\r\n    handleLogout = () => {\r\n        const { dispatch } = this.props;\r\n        dispatch(handleLogoutUser());\r\n    }\r\n\r\n    handleDrawerOpen = () => {\r\n        this.setState({\r\n            open: true\r\n        });\r\n    }\r\n\r\n    handleDrawerClose = () => {\r\n        this.setState({\r\n            open: false\r\n        });\r\n    }\r\n\r\n    onCityChange = (event) => {\r\n        const cityId = event.target.value;\r\n        const { listOfCities, dispatch, selectedMovie } = this.props; // from home component\r\n        const selectedCityObject = listOfCities.filter(city => city.id === cityId);\r\n        if (Object.keys(selectedMovie).length === 0) {\r\n            dispatch(setCityAndMoviesList(selectedCityObject[0]))\r\n        }\r\n        else {\r\n            dispatch(setCityAndMoviesList(selectedCityObject[0]))\r\n            dispatch(setMovieAndTheaterList(selectedMovie, false))\r\n        }\r\n        sessionStorage.setItem('city', JSON.stringify(selectedCityObject[0]))\r\n    }\r\n\r\n    render() {\r\n        const { classes, listOfCities, selectedCity, authedUser, loading } = this.props;\r\n        const { open } = this.state;\r\n        if (loading) return <Loader />\r\n        return (\r\n            <header>\r\n                <AppBar position=\"static\" className={clsx([classes.appBar, classes.color], {\r\n                    [classes.appBarShift]: open\r\n                })}>\r\n                    <Toolbar className=\"toolBar\">\r\n                        <div>\r\n                            <Link to='/'>\r\n                                <img className={classes.logo} src=\"/brand.png\" alt=\"moviebooking\" />\r\n                            </Link>\r\n                        </div>\r\n                        <div className=\"leftDiv\">\r\n                            {(listOfCities !== undefined && <Select className={classes.select}\r\n                                inputProps={{\r\n                                    classes: {\r\n                                        icon: classes.icon,\r\n                                    },\r\n                                }}\r\n                                labelId=\"demo-simple-select-filled-label\"\r\n                                id=\"demo-simple-select-filled\"\r\n                                value={selectedCity.id}\r\n                                onChange={this.onCityChange}\r\n                            >\r\n                                {listOfCities.map(city =>\r\n                                    <MenuItem key={city.id} value={city.id}><em>{city.cityName}</em></MenuItem>\r\n                                )}\r\n                            </Select>)}\r\n                            {(authedUser === null || authedUser === undefined) && (\r\n                                <Link to='/login' style={{ textDecoration: 'none' }}>\r\n                                    <ButtonGroup>\r\n                                        <Button style={{ backgroundColor: header, color: headerText, border: `1px solid ${headerText}` }}>\r\n                                            Log In\r\n                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Link>\r\n                            )}\r\n\r\n                            {authedUser !== null && authedUser !== undefined\r\n                                ? <React.Fragment>\r\n                                    <Typography variant=\"body1\">Welcome {authedUser.response.fullName}</Typography>\r\n                                    {(authedUser.response.imageUrl !== null\r\n                                        ? <Avatar alt=\"user\" src={userProfilePhoto + authedUser.response.imageUrl} style={{ backgroundColor: '#F5F4F2', color: headerText }} />\r\n                                        : <AccountCircleIcon style={{ fontSize: '2.5em' }} />)}\r\n                                    <IconButton\r\n                                        color=\"inherit\"\r\n                                        aria-label=\"open drawer\"\r\n                                        onClick={this.handleDrawerOpen}\r\n                                        className={clsx(open && classes.hide)}\r\n                                        edge=\"start\"\r\n                                    >\r\n                                        <MenuIcon />\r\n                                    </IconButton>\r\n                                </React.Fragment>\r\n                                : <React.Fragment>\r\n                                    <Typography variant=\"body1\">Welcome Guest</Typography>\r\n                                    <AccountCircleIcon style={{ fontSize: '2.5em' }} />\r\n                                </React.Fragment>\r\n                            }\r\n                        </div>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    className={classes.drawer}\r\n                    variant=\"persistent\"\r\n                    anchor=\"right\"\r\n                    open={open}\r\n                    classes={{\r\n                        paper: classes.drawerPaper,\r\n                    }}\r\n                >\r\n                    <div className={classes.drawerHeader}>\r\n                        <IconButton onClick={this.handleDrawerClose} style={{ color: headerText }}>\r\n                            <ChevronRightIcon />\r\n                            <Typography variant=\"subtitle1\" component=\"h5\">Hi!</Typography>\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>\r\n                        <ListItem button key='profile' component={Link} to=\"/profile\">\r\n                            <ListItemIcon><AccountCircleIcon /></ListItemIcon>\r\n                            <ListItemText primary='My Profile' />\r\n                        </ListItem>\r\n                        <ListItem button key='bookingsHistory' component={Link} to=\"/bookings\">\r\n                            <ListItemIcon><ConfirmationNumberIcon /></ListItemIcon>\r\n                            <ListItemText primary='My Bookings' />\r\n                        </ListItem>\r\n                        <ListItem button key='signout' onClick={this.handleLogout}\r\n                            style={{ backgroundColor: header, color: headerText, textAlign: 'center' }}>\r\n                            <ListItemText primary='Sign Out' />\r\n                        </ListItem>\r\n                    </List>\r\n                </Drawer>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ authedUser, selectedCity, selectedMovie, loading }, ownProps) {\r\n    const { listOfCities } = ownProps;\r\n\r\n    return {\r\n        listOfCities,\r\n        selectedCity,\r\n        authedUser,\r\n        selectedMovie,\r\n        loading\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps)(Header))",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":15,"column":9,"nodeType":"132","messageId":"133","endLine":15,"endColumn":16},{"ruleId":"130","severity":1,"message":"134","line":1,"column":10,"nodeType":"132","messageId":"133","endLine":1,"endColumn":21},{"ruleId":"130","severity":1,"message":"135","line":11,"column":7,"nodeType":"132","messageId":"133","endLine":11,"endColumn":13},{"ruleId":"130","severity":1,"message":"135","line":262,"column":7,"nodeType":"132","messageId":"133","endLine":262,"endColumn":13},{"ruleId":"130","severity":1,"message":"136","line":13,"column":10,"nodeType":"132","messageId":"133","endLine":13,"endColumn":16},{"ruleId":"130","severity":1,"message":"137","line":19,"column":30,"nodeType":"132","messageId":"133","endLine":19,"endColumn":45},{"ruleId":"130","severity":1,"message":"138","line":19,"column":47,"nodeType":"132","messageId":"133","endLine":19,"endColumn":66},{"ruleId":"139","severity":1,"message":"140","line":320,"column":19,"nodeType":"141","endLine":324,"endColumn":21},{"ruleId":"130","severity":1,"message":"142","line":5,"column":20,"nodeType":"132","messageId":"133","endLine":5,"endColumn":30},{"ruleId":"130","severity":1,"message":"137","line":8,"column":22,"nodeType":"132","messageId":"133","endLine":8,"endColumn":37},{"ruleId":"130","severity":1,"message":"138","line":8,"column":39,"nodeType":"132","messageId":"133","endLine":8,"endColumn":58},{"ruleId":"130","severity":1,"message":"143","line":38,"column":17,"nodeType":"132","messageId":"133","endLine":38,"endColumn":24},{"ruleId":"130","severity":1,"message":"144","line":24,"column":16,"nodeType":"132","messageId":"133","endLine":24,"endColumn":24},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","'TramRounded' is defined but never used.","'reqObj' is assigned a value but never used.","'header' is defined but never used.","'buttonAvailable' is defined but never used.","'buttonAvailableText' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Typography' is defined but never used.","'loading' is assigned a value but never used.","'Redirect' is defined but never used.","no-global-assign","no-unsafe-negation"]