[{"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\index.js":"1","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\App.js":"2","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\middlewares\\index.js":"3","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\index.js":"4","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\ProtectedRoute.js":"5","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\Movie.js":"6","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\theme.js":"7","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signin\\SignIn.js":"8","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\middlewares\\logger.js":"9","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\ForgotPassword.js":"10","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\screen\\Screen.js":"11","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\screen.js":"12","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\loading.js":"13","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\City.js":"14","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\config\\apiConfig.js":"15","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\authedUser.js":"16","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\myBookings\\bookingHistory\\BookingHistory.js":"17","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\purchase\\payment-form\\PaymentForm.js":"18","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\loading.js":"19","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\movie-container\\components\\MovieCard.js":"20","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\Password.js":"21","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\utils\\api.js":"22","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\header\\Header.js":"23","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\SignUp.js":"24","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\profile\\Profile.js":"25","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\footer\\Footer.js":"26","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\Home.js":"27","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\myBookings\\MyBookings.js":"28","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\pageNotFound\\PageNotFound.js":"29","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\theater.js":"30","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\authedUser.js":"31","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\theatersList.js":"32","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\seatPlan.js":"33","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\shared.js":"34","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\movie-container\\MovieContainer.js":"35","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\theater.js":"36","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\screen.js":"37","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterCard.js":"38","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\error\\Error.js":"39","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterContainer.js":"40","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\ticket\\Ticket.js":"41"},{"size":1130,"mtime":1607940912327,"results":"42","hashOfConfig":"43"},{"size":2692,"mtime":1608288855860,"results":"44","hashOfConfig":"43"},{"size":156,"mtime":1606720032227,"results":"45","hashOfConfig":"43"},{"size":653,"mtime":1607610469454,"results":"46","hashOfConfig":"43"},{"size":946,"mtime":1607669275726,"results":"47","hashOfConfig":"43"},{"size":1004,"mtime":1607691997726,"results":"48","hashOfConfig":"43"},{"size":347,"mtime":1607955968359,"results":"49","hashOfConfig":"43"},{"size":6778,"mtime":1608223641916,"results":"50","hashOfConfig":"43"},{"size":297,"mtime":1606720032275,"results":"51","hashOfConfig":"43"},{"size":9468,"mtime":1608221627456,"results":"52","hashOfConfig":"43"},{"size":11685,"mtime":1608197518608,"results":"53","hashOfConfig":"43"},{"size":242,"mtime":1607610469320,"results":"54","hashOfConfig":"43"},{"size":200,"mtime":1607543423875,"results":"55","hashOfConfig":"43"},{"size":1414,"mtime":1607610469293,"results":"56","hashOfConfig":"43"},{"size":2009,"mtime":1608020140356,"results":"57","hashOfConfig":"43"},{"size":1106,"mtime":1608287657895,"results":"58","hashOfConfig":"43"},{"size":1854,"mtime":1608197518608,"results":"59","hashOfConfig":"43"},{"size":6016,"mtime":1608099901924,"results":"60","hashOfConfig":"43"},{"size":140,"mtime":1607544076655,"results":"61","hashOfConfig":"43"},{"size":1782,"mtime":1607939222252,"results":"62","hashOfConfig":"43"},{"size":3351,"mtime":1607713115392,"results":"63","hashOfConfig":"43"},{"size":6784,"mtime":1608287580087,"results":"64","hashOfConfig":"43"},{"size":10172,"mtime":1608200218128,"results":"65","hashOfConfig":"43"},{"size":9989,"mtime":1608285555692,"results":"66","hashOfConfig":"43"},{"size":14241,"mtime":1608223443881,"results":"67","hashOfConfig":"43"},{"size":3110,"mtime":1608270335072,"results":"68","hashOfConfig":"43"},{"size":2319,"mtime":1608098680575,"results":"69","hashOfConfig":"43"},{"size":3911,"mtime":1608274877342,"results":"70","hashOfConfig":"43"},{"size":2481,"mtime":1608113670339,"results":"71","hashOfConfig":"43"},{"size":247,"mtime":1607610469320,"results":"72","hashOfConfig":"43"},{"size":242,"mtime":1607584538147,"results":"73","hashOfConfig":"43"},{"size":241,"mtime":1607497903909,"results":"74","hashOfConfig":"43"},{"size":226,"mtime":1606900214204,"results":"75","hashOfConfig":"43"},{"size":1857,"mtime":1607929926560,"results":"76","hashOfConfig":"43"},{"size":3468,"mtime":1607691997724,"results":"77","hashOfConfig":"43"},{"size":627,"mtime":1606900214201,"results":"78","hashOfConfig":"43"},{"size":179,"mtime":1607610469317,"results":"79","hashOfConfig":"43"},{"size":9744,"mtime":1608276509424,"results":"80","hashOfConfig":"43"},{"size":908,"mtime":1607610469313,"results":"81","hashOfConfig":"43"},{"size":7226,"mtime":1608020140367,"results":"82","hashOfConfig":"43"},{"size":4128,"mtime":1608197518608,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1m7sr9s",{"filePath":"87","messages":"88","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"102"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\index.js",[],["173","174"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\App.js",["175"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\middlewares\\index.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\index.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\ProtectedRoute.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\Movie.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\theme.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signin\\SignIn.js",["176"],"import React, { Component } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { connect } from \"react-redux\";\r\nimport compose from \"recompose/compose\";\r\nimport { handleAuthedUser } from \"../../store/actions/authedUser\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Loader from \"../../shared-components/Loader\";\r\nimport { header } from \"../../theme\";\r\nimport Footer from \"../../shared-components/footer/Footer\"\r\nimport Header from \"../../shared-components/header/Header\"\r\n\r\nconst styles = (theme) => ({\r\n  textInput: {\r\n    borderColor: \"red\",\r\n  },\r\n  paper: {\r\n    paddingTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"red\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    backgroundColor: header,\r\n    height: 45,\r\n    borderRadius: 0\r\n  },\r\n  errorColor: {\r\n    color: \"red\",\r\n  },\r\n  infoMsg:{\r\n    backgroundColor:\"#BDE5F8\",\r\n    color: \"#00529B\",\r\n    padding: 6,\r\n    borderLeft:\"5px solid blue\",\r\n    marginTop: 10\r\n  }\r\n});\r\n\r\nclass SignIn extends Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    showErrorMessage: false\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    if (event.target.name === \"email\") {\r\n      let email = event.target.value;\r\n      this.setState({\r\n        email,\r\n      });\r\n    } else {\r\n      let password = event.target.value;\r\n      this.setState({\r\n        password,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { email, password } = this.state;\r\n    const { dispatch } = this.props;\r\n    const userCredentials = {\r\n      email,\r\n      password,\r\n    };\r\n    dispatch(handleAuthedUser(userCredentials));\r\n    this.setState({\r\n      showErrorMessage: true\r\n    })\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      classes,\r\n      loading,\r\n      authedUser,\r\n      location,\r\n      selectedMovie,\r\n    } = this.props;\r\n    const { email, password, showErrorMessage } = this.state;\r\n\r\n    if (authedUser !== null && authedUser.exception === null) {\r\n      if (location.state === undefined) return <Redirect to=\"/\" />;\r\n      else if (location.state.from === undefined) return <Redirect to=\"/\" />;\r\n      else {\r\n        const { from } = location.state;\r\n        if (\r\n          from.pathname === \"/purchase\" &&\r\n          Object.keys(selectedMovie).length === 0\r\n        )\r\n          return <Redirect to=\"/\" />;\r\n        return <Redirect to={from} />;\r\n      }\r\n    }\r\n    return (\r\n      <div style={{backgroundColor:\"#f1f2f6\"}}>\r\n      <Header />\r\n        <Container\r\n          style={{ backgroundColor: \"white\", marginTop:30, marginBottom:30}}\r\n          component=\"main\"\r\n          maxWidth=\"xs\"\r\n        >\r\n          <CssBaseline />\r\n          {loading && <Loader />}\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign in\r\n            </Typography>\r\n\r\n            {location.state !== undefined &&\r\n              location.state.responseOnSuccess !== undefined && (\r\n                <Typography className={classes.infoMsg}>{location.state.responseOnSuccess}</Typography>\r\n              )}\r\n\r\n            {location.state !== undefined &&\r\n              location.state.from !== undefined &&\r\n              location.state.from.pathname === \"/purchase\" && (\r\n                <Typography className={classes.infoMsg}>\r\n                  !Please Signin before proceeding to purchase.\r\n                </Typography>\r\n              )}\r\n\r\n            <form className={classes.form} onSubmit={this.handleSubmit}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                className={classes.textInput}\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                type=\"email\"\r\n                value={email}\r\n                autoFocus\r\n                onChange={this.handleChange}\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                value={password}\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                onChange={this.handleChange}\r\n              />\r\n\r\n              {(authedUser !== null && authedUser.exception !== null && showErrorMessage) && (\r\n                <Typography className={classes.errorColor}>\r\n                  {authedUser.exception.errorMsg}\r\n                </Typography>\r\n              )}\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n              >\r\n                Sign In\r\n              </Button>\r\n\r\n              <Grid container style={{marginBottom:30}}>\r\n                <Grid item xs>\r\n                  <Link\r\n                    to=\"/forgotPassword\"\r\n                    style={{ textDecoration: \"none\", color: header }}\r\n                  >\r\n                    Forgot password?\r\n                  </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link\r\n                    to=\"/signup\"\r\n                    style={{ textDecoration: \"none\", color: header }}\r\n                  >\r\n                    {\"Don't have an account? Sign Up\"}\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </div>\r\n        </Container>\r\n        <Footer />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ loading, authedUser, selectedMovie }, ownProps) {\r\n  return {\r\n    loading,\r\n    authedUser,\r\n    selectedMovie,\r\n  };\r\n}\r\n\r\nexport default compose(withStyles(styles), connect(mapStateToProps))(SignIn);\r\n",["177","178"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\middlewares\\logger.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\ForgotPassword.js",["179"],"import React, { Component } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Password from \"./Password\";\r\nimport OtpInput from \"react-otp-input\";\r\nimport { sendOtp, resetPassword } from \"../../utils/api\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { header } from \"../../theme\";\r\nimport Header from \"../../shared-components/header/Header\"\r\nimport Footer from \"../../shared-components/footer/Footer\"\r\n\r\n\r\nconst styles = (theme) => ({\r\n  paper: {\r\n    paddingTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"red\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  otpBox: {\r\n    minHeight: \"50px\",\r\n    minWidth: \"40px\",\r\n  },\r\n  spacebetweenBoxes: {\r\n    minWidth: \"15px\",\r\n  },\r\n  errorColor: {\r\n    color: \"red\",\r\n  },\r\n  successColor: {\r\n    color: \"green\",\r\n  },\r\n  cardStyle: {\r\n    minWidth: 400,\r\n    minHeight: 300,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  loginButton: {\r\n    backgroundColor: \"green\",\r\n    color: \"white\",\r\n    marginTop: 20,\r\n    marginLeft: 30,\r\n  },\r\n  checkBoxIcon: {\r\n    minWidth: 40,\r\n    minHeight: 40,\r\n    color: \"green\",\r\n  },\r\n});\r\n\r\nclass ForgotPassword extends Component {\r\n  state = {\r\n    email: \"\",\r\n    otp: \"\",\r\n    otpErrorMsg: \"\",\r\n    emailDisabled: false,\r\n    sendOtpOnSubmit: true,\r\n    showNewPasswordPanel: false,\r\n    password: \"\",\r\n    passwordIsValid: true,\r\n    confirmPasswordIsValid: true,\r\n    redirectToLogin: false,\r\n    passwordChangeSuccess: \"\",\r\n    passwordChangeFailed: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  passwordsAreValid = (password, passwordIsValid, confirmPasswordIsValid) => {\r\n    this.setState({\r\n      password,\r\n      passwordIsValid,\r\n      confirmPasswordIsValid,\r\n    });\r\n  };\r\n  handleChange = (event) => {\r\n    let email = event.target.value;\r\n    this.setState({\r\n      email,\r\n    });\r\n  };\r\n\r\n  handleOtp = (otp) => {\r\n    this.setState({\r\n      otp,\r\n    });\r\n  };\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { sendOtpOnSubmit, email } = this.state;\r\n    if (sendOtpOnSubmit) {\r\n      this.setState({\r\n        loading: true,\r\n      });\r\n      const emailObj = {\r\n        email,\r\n      };\r\n      sendOtp(emailObj).then((res) => {\r\n        if (res.status === 200)\r\n          this.setState({\r\n            loading: false,\r\n            otp: \"\",\r\n            passwordChangeFailed: \"\",\r\n            otpErrorMsg: \"\",\r\n            emailDisabled: true,\r\n            showNewPasswordPanel: true,\r\n            sendOtpOnSubmit: false,\r\n          });\r\n        else\r\n          this.setState({\r\n            loading: false,\r\n            passwordChangeFailed: \"\",\r\n            otpErrorMsg: res.exception.errorMsg,\r\n          });\r\n      });\r\n    } else {\r\n      const {\r\n        password,\r\n        passwordIsValid,\r\n        confirmPasswordIsValid,\r\n        otp,\r\n        email,\r\n      } = this.state;\r\n      const otpLength = otp.length;\r\n      if (passwordIsValid && confirmPasswordIsValid && otpLength === 6) {\r\n        this.setState({\r\n          loading: true,\r\n        });\r\n        const pwdDetails = {\r\n          username: email,\r\n          password,\r\n          code: otp,\r\n        };\r\n        resetPassword(pwdDetails).then((res) => {\r\n          if (res.status === 200) {\r\n            this.setState({\r\n              loading: false,\r\n              passwordChangeSuccess: res.response,\r\n            });\r\n          } else {\r\n            if (res.status >= 400 && res.status <= 499)\r\n              this.setState({\r\n                loading: false,\r\n                otp: \"\",\r\n                passwordChangeFailed: res.exception.errorMsg,\r\n              });\r\n            else\r\n              this.setState({\r\n                loading: false,\r\n                passwordChangeFailed: res.exception.errorMsg,\r\n                emailDisabled: false,\r\n                showNewPasswordPanel: false,\r\n                sendOtpOnSubmit: true,\r\n              });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const {\r\n      email,\r\n      showNewPasswordPanel,\r\n      emailDisabled,\r\n      otp,\r\n      otpErrorMsg,\r\n      passwordChangeFailed,\r\n      passwordChangeSuccess,\r\n      loading,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div style={{backgroundColor:\"#f1f2f6\"}}>\r\n      <Header />\r\n      <Container component=\"main\" maxWidth=\"xs\" style={{ backgroundColor: \"white\", marginTop:30, marginBottom:30}}>\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Forgot Password\r\n          </Typography>\r\n          {passwordChangeSuccess !== \"\" ? (\r\n            <Card className={classes.cardStyle} variant=\"outlined\">\r\n              <CheckBoxIcon className={classes.checkBoxIcon} />\r\n              <CardContent>\r\n                <Typography className={classes.successColor}>\r\n                  Password Changed Successfully\r\n                </Typography>\r\n                <CardActions>\r\n                  <Link to=\"/login\">\r\n                    <Button size=\"medium\" className={classes.loginButton}>\r\n                      Proceed to login\r\n                    </Button>\r\n                  </Link>\r\n                </CardActions>\r\n              </CardContent>\r\n            </Card>\r\n          ) : (\r\n            <form className={classes.form} onSubmit={this.handleSubmit}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                type=\"email\"\r\n                value={email}\r\n                autoFocus\r\n                onChange={this.handleChange}\r\n                disabled={emailDisabled ? true : false}\r\n              />\r\n\r\n              {showNewPasswordPanel && (\r\n                <div>\r\n                  <Password passwordsAreValid={this.passwordsAreValid} />\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                      <Typography>\r\n                        Please enter OTP sent to your registered email id.\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid style={{display:'flex', justifyContent:'center'}} item xs={12}>\r\n                      <OtpInput\r\n                        value={otp}\r\n                        onChange={this.handleOtp}\r\n                        numInputs={6}\r\n                        separator={\r\n                          <span className={classes.spacebetweenBoxes}>\r\n                            <hr />\r\n                          </span>\r\n                        }\r\n                        inputStyle={classes.otpBox}\r\n                        isInputNum={true}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n              )}\r\n\r\n              {otpErrorMsg !== \"\" && (\r\n                <Typography className={classes.errorColor}>\r\n                  {otpErrorMsg}\r\n                </Typography>\r\n              )}\r\n              {passwordChangeFailed !== \"\" && (\r\n                <Typography className={classes.errorColor}>\r\n                  {passwordChangeFailed}\r\n                </Typography>\r\n              )}\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n              >\r\n                {showNewPasswordPanel ? \"Change Password\" : \"Send OTP\"}\r\n              </Button>\r\n\r\n              {loading && (\r\n                <Grid container spacing={5} justify=\"center\">\r\n                  <Grid item>\r\n                    <CircularProgress />\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n\r\n              <Grid container style={{marginBottom:30}}>\r\n                <Grid item xs>\r\n                  <Link to=\"/login\" style={{ textDecoration: \"none\", color: header }}>\r\n                    Proceed to login\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          )}\r\n        </div>\r\n      </Container>\r\n      <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(ForgotPassword);\r\n","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\screen\\Screen.js",["180","181"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Card from '@material-ui/core/Card';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport compose from 'recompose/compose';\r\nimport { CardContent, Typography, IconButton, Button, Tooltip } from '@material-ui/core';\r\nimport { ArrowBackIosRounded } from '@material-ui/icons'\r\nimport { headerText, buttonAvailable, buttonAvailableText } from '../../theme'\r\nimport { setSeatsAndPrice } from '../../store/actions/shared'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport Loader from '../../shared-components/Loader'\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        width: '98%',\r\n        borderBottom: 'none',\r\n        borderTop: 'none',\r\n        overFlow: 'auto',\r\n    },\r\n\r\n})\r\n\r\nclass Screen extends Component {\r\n    state = {\r\n        selectedSeats: [],\r\n        price: 0,\r\n        redirect: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {seatsAndPrice} = this.props;\r\n        if(seatsAndPrice.selectedSeats !== undefined && seatsAndPrice.price !==undefined) {\r\n            this.setState({\r\n                selectedSeats: seatsAndPrice.selectedSeats,\r\n                price: seatsAndPrice.price\r\n            })\r\n        }\r\n    }\r\n\r\n    calculatePrice(theater, selectedSeats) {\r\n        let price = 0;\r\n        selectedSeats.forEach(seat => {\r\n            if (seat.charAt(0) === \"G\") {\r\n                price = price + theater.priceOfDifferentSeatType.GOLD;\r\n            }\r\n            else if (seat.charAt(0) === \"P\") {\r\n                price = price + theater.priceOfDifferentSeatType.PLATINUM;\r\n            }\r\n            else if (seat.charAt(0) === \"D\") {\r\n                price = price + theater.priceOfDifferentSeatType.DIAMOND;\r\n            }\r\n        })\r\n        return price;\r\n    }\r\n\r\n    selectSeat = (seat) => {\r\n        this.setState(currentState => {\r\n            let selectedSeats = []\r\n            let price = 0\r\n            if (currentState.selectedSeats.includes(seat)) {\r\n                selectedSeats = currentState.selectedSeats.filter(seatValue => seatValue !== seat)\r\n                price = this.calculatePrice(this.props.selectedScreen, selectedSeats)\r\n            }\r\n            else {\r\n                selectedSeats = currentState.selectedSeats.concat(seat)\r\n                price = this.calculatePrice(this.props.selectedScreen, selectedSeats)\r\n            }\r\n            return {\r\n                selectedSeats: selectedSeats,\r\n                price: price\r\n            }\r\n        })\r\n    }\r\n\r\n    purchaseSeats = () => {\r\n        /*Redirect to payment page and store state information in redux store*/\r\n        this.props.dispatch(setSeatsAndPrice(this.state.selectedSeats, this.props.seatPlan.response.seatPlanId, this.state.price))\r\n        this.setState({\r\n            redirect: true\r\n        })\r\n    }\r\n\r\n    createSeatMap = (selectedScreen) => {\r\n        let seatMap = [];\r\n        Object.keys(selectedScreen.noOfRowsPerSeatType).forEach(seatType => {\r\n            let seatTypeMap = [];\r\n            Array.from(Array(selectedScreen.noOfRowsPerSeatType[seatType]).keys()).forEach(\r\n                (row) => {\r\n                    let seatRow = [];\r\n                    Array.from(Array(selectedScreen.columns).keys()).forEach(\r\n                        (col) => {\r\n                            seatRow.push(seatType.charAt(0) + 'R' + (row + 1) + 'C' + + (col + 1))\r\n                        }\r\n                    )\r\n                    seatTypeMap.push(seatRow);\r\n                }\r\n            )\r\n            seatMap.push(seatTypeMap)\r\n        })\r\n\r\n        return seatMap;\r\n    }\r\n\r\n    render() {\r\n        const { seatPlan, selectedScreen, selectedTheater, selectedMovie, classes } = this.props\r\n\r\n        const seatMap = Object.keys(selectedMovie).length === 0 ? [] : this.createSeatMap(selectedScreen)\r\n        return (\r\n            Object.keys(selectedMovie).length === 0 ? <Redirect to=\"/\" /> :\r\n                this.state.redirect ? (<Redirect to={{ pathname: '/purchase' }} />) : (\r\n                    <div style={{ minHeight: '100vh', width: '100%', margin: 0, padding: 0 }}>\r\n                        <div className='screen-header'>\r\n                            <IconButton >\r\n                                <Link style={{ textDecoration: 'none' }} to={{\r\n                                    pathname: \"/movie\",\r\n                                }}><ArrowBackIosRounded style={{ color: headerText }} /></Link>\r\n                            </IconButton>\r\n                            <span>{selectedMovie.name}</span>\r\n\r\n                            <span style={{ color: 'darkgrey', marginLeft: '10px', fontSize: '0.75em' }}>\r\n                                {selectedTheater.theaterName + \" \" + selectedTheater.address.city}</span>\r\n                            <div className='screen-info'>\r\n                                <div className='info'>\r\n                                    <div className='seat' style={{ fontSize: '0.7em', backgroundColor: 'white', cursor: 'default' }}>Available Seats</div>\r\n                                    <div className='seat chosen' style={{ fontSize: '0.7em', cursor: 'default' }}>Selected Seats</div>\r\n                                    <Tooltip title=\"Other users have booked this seat\" aria-label=\"add\">\r\n                                        <div className='seat booked' style={{ fontSize: '0.7em' }}>Booked Seats</div>\r\n                                    </Tooltip>\r\n                                    <Tooltip title=\"Other users have locked these seats but payment is yet to be made\" aria-label=\"add\">\r\n                                        <div className='seat locked' style={{ fontSize: '0.7em' }}>Locked Seats</div>\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='seat-container'>\r\n                            {Object.keys(seatPlan).length === 0 ?\r\n                                <Loader />\r\n                                : (seatPlan.exception === null ? (<Card className={classes.root} variant=\"outlined\">\r\n                                    {Object.keys(selectedScreen.noOfRowsPerSeatType).map((seatType, index) => (\r\n                                        <CardContent key={seatType}>\r\n                                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                                {seatType + ' - Rs. ' + selectedScreen.priceOfDifferentSeatType[seatType]}\r\n                                            </Typography>\r\n                                            <div className='seat-map'>\r\n                                                {seatMap[index].map((row, rowindex) => (\r\n                                                    <div className='seat-row' key={row}>\r\n                                                        {seatMap[index][rowindex].map(\r\n                                                            (col, colIndex) => (\r\n                                                                (seatPlan.response.bookedSeats !== undefined && seatPlan.response.bookedSeats.includes(seatMap[index][rowindex][colIndex]) ?\r\n                                                                    <Tooltip title=\"Other user booked this seat\" aria-label=\"add\">\r\n                                                                        <div className='seat booked' key={seatMap[index][rowindex][colIndex]}>\r\n                                                                            {seatMap[index][rowindex][colIndex].split('C')[1]}\r\n                                                                        </div>\r\n                                                                    </Tooltip>\r\n                                                                    : (this.state.selectedSeats.includes(seatMap[index][rowindex][colIndex]) ?\r\n                                                                        <div className='seat chosen' key={seatMap[index][rowindex][colIndex]}\r\n                                                                            onClick={() => this.selectSeat(seatMap[index][rowindex][colIndex])}\r\n                                                                        >\r\n                                                                            {seatMap[index][rowindex][colIndex].split('C')[1]}\r\n                                                                        </div>\r\n                                                                        : (seatPlan.response.lockedSeats !== undefined && seatPlan.response.lockedSeats.includes(seatMap[index][rowindex][colIndex]) ?\r\n                                                                            <Tooltip title=\"Other user has locked this seat but payment is yet to be made\" aria-label=\"add\">\r\n                                                                                <div className='seat locked' key={seatMap[index][rowindex][colIndex]}\r\n                                                                                >\r\n                                                                                    {seatMap[index][rowindex][colIndex].split('C')[1]}\r\n                                                                                </div></Tooltip>\r\n                                                                            : <Tooltip title=\"Click to select this seat\" aria-label=\"add\">\r\n                                                                                <div className='seat' key={seatMap[index][rowindex][colIndex]}\r\n                                                                                    onClick={() => this.selectSeat(seatMap[index][rowindex][colIndex])}\r\n                                                                                >\r\n                                                                                    {seatMap[index][rowindex][colIndex].split('C')[1]}\r\n                                                                                </div></Tooltip>))\r\n\r\n                                                                )))}\r\n                                                    </div>))}\r\n                                            </div>\r\n                                        </CardContent>\r\n                                    ))}\r\n                                    <div style={{ margin: 10, display: 'flex', alignItems: \"center\", justifyContent: \"center\" }}>\r\n                                        <Button className='timebutton' disabled={this.state.selectedSeats.length === 0}\r\n                                            onClick={this.purchaseSeats}\r\n                                            variant='outlined'\r\n                                        >\r\n                                            Purchase - Rs {this.state.price}</Button>\r\n                                    </div>\r\n                                </Card>\r\n                                ) : <Redirect to={{\r\n                                    pathname: '/error',\r\n                                    state: {\r\n                                        exception: seatPlan.exception\r\n                                    }\r\n                                }} />)}\r\n                        </div >\r\n                    </div>)\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ selectedScreen, selectedTheater, seatPlan, selectedMovie, seatsAndPrice }) => {\r\n    return { selectedScreen, seatPlan, selectedTheater, selectedMovie, seatsAndPrice }\r\n}\r\n\r\nexport default compose(withStyles(styles), connect(mapStateToProps))(Screen)","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\screen.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\loading.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\City.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\config\\apiConfig.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\authedUser.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\myBookings\\bookingHistory\\BookingHistory.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\purchase\\payment-form\\PaymentForm.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\loading.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\movie-container\\components\\MovieCard.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\Password.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\utils\\api.js",["182","183","184","185"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\header\\Header.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\SignUp.js",["186"],"import React, { Component } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport MuiPhoneNumber from \"material-ui-phone-number\";\r\nimport { signup } from \"../../utils/api\";\r\nimport Password from \"./Password\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Loader from \"../../shared-components/Loader\"\r\nimport Header from \"../../shared-components/header/Header\"\r\nimport Footer from \"../../shared-components/footer/Footer\"\r\nimport { header } from \"../../theme\";\r\n\r\nconst styles = (theme) => ({\r\n  paper: {\r\n    paddingTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"red\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  errorColor: {\r\n    marginTop:20,\r\n    color: \"red\",\r\n  },\r\n});\r\n\r\nclass SignUp extends Component {\r\n  state = {\r\n    redirectTologin: false,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    phone: \"\",\r\n    phoneErrorMsg: false,\r\n    fnameIsValid: true,\r\n    lnameIsValid: true,\r\n    email: \"\",\r\n    phoneIsValid:true,\r\n    birthday: \"\",\r\n    password: \"\",\r\n    passwordIsValid: true,\r\n    confirmPasswordIsValid: true,\r\n    loading: false,\r\n    responseOnSuccess: \"\",\r\n    responseOnError: \"\",\r\n  };\r\n\r\n  passwordsAreValid = (password, passwordIsValid, confirmPasswordIsValid) => {\r\n    this.setState({\r\n      password,\r\n      passwordIsValid,\r\n      confirmPasswordIsValid,\r\n    });\r\n  };\r\n\r\n  validateName = (event) => {\r\n    const field = event.target.name;\r\n    const name = event.target.value;\r\n    if (field === \"firstName\") {\r\n      if (!(name.match(/^[A-Za-z]+$/) || name === \"\"))\r\n        this.setState({\r\n          firstName: name,\r\n          fnameIsValid: false,\r\n        });\r\n      else\r\n        this.setState({\r\n          firstName: name,\r\n          fnameIsValid: true,\r\n        });\r\n    } else {\r\n      if (!(name.match(/^[A-Za-z]+$/) || name === \"\"))\r\n        this.setState({\r\n          lastName: name,\r\n          lnameIsValid: false,\r\n        });\r\n      else\r\n        this.setState({\r\n          lastName: name,\r\n          lnameIsValid: true,\r\n        });\r\n    }\r\n  };\r\n\r\n    validatePhone = (phone) => {\r\n      console.log(phone)\r\n      if(phone.substring(1,3) === '91' && phone.length === 15)\r\n        this.setState({\r\n          phone,\r\n          phoneIsValid:true,\r\n          phoneErrorMsg:false\r\n        })\r\n        else\r\n          this.setState({\r\n            phone,\r\n             phoneIsValid:false,\r\n             phoneErrorMsg:false\r\n          })\r\n    };\r\n\r\n  setBirthday = (event) => {\r\n    const birthday = event.target.value;\r\n    this.setState({\r\n      birthday,\r\n    });\r\n  };\r\n\r\n  setEmail = (event) => {\r\n    const email = event.target.value;\r\n    this.setState({\r\n      email,\r\n    });\r\n  };\r\n\r\n  // setPhone = (event) => {\r\n  //   const phone = event.target.value;\r\n  //   console.log(phone)\r\n  //   this.setState({\r\n  //     phone,\r\n  //   });\r\n  // };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"handleSubmit clicked\");\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      fnameIsValid,\r\n      lnameIsValid,\r\n      phoneIsValid,\r\n      email,\r\n      phone,\r\n      phoneErrorMsg,\r\n      birthday,\r\n      password,\r\n      passwordIsValid,\r\n      confirmPasswordIsValid,\r\n    } = this.state;\r\n    if (\r\n      fnameIsValid === true &&\r\n      lnameIsValid === true &&\r\n      phoneIsValid === true &&\r\n      phone !== \"\" &&\r\n      passwordIsValid === true &&\r\n      confirmPasswordIsValid === true\r\n    ) {\r\n      console.log(\"all fields contain valid inputs\");\r\n      this.setState({\r\n        loading: true,\r\n      });\r\n      //setting payload\r\n      let userInfo = {\r\n        email,\r\n        name: `${firstName} ${lastName}`,\r\n        password,\r\n        phoneNumber: phone,\r\n        dateOfBirth: birthday,\r\n      };\r\n      signup(userInfo).then((res) => {\r\n        if (res.status === 200)\r\n          this.setState({\r\n            loading: false,\r\n            responseOnError: \"\",\r\n            responseOnSuccess: res.response,\r\n            redirectToLogin: true,\r\n          });\r\n        else\r\n          this.setState({\r\n            loading: false,\r\n            responseOnError: res.exception.errorMsg,\r\n          });\r\n      });\r\n    }else{\r\n      if(phone === \"\")\r\n        this.setState({\r\n          phoneErrorMsg: true\r\n        })\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const {\r\n      fnameIsValid,\r\n      lnameIsValid,\r\n      phoneIsValid,\r\n      loading,\r\n      redirectToLogin,\r\n      responseOnSuccess,\r\n      responseOnError,\r\n      phoneErrorMsg\r\n    } = this.state;\r\n\r\n    if (redirectToLogin)\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/login\",\r\n            state: { responseOnSuccess },\r\n          }}\r\n        />\r\n      );\r\n\r\n    return (\r\n      <div style={{backgroundColor:\"#f1f2f6\"}}>\r\n      <Header />\r\n      <Container style={{backgroundColor:\"white\", marginTop:30, marginBottom:30}} component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        {loading && <Loader />}\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n\r\n          <form className={classes.form} onSubmit={this.handleSubmit}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  autoComplete=\"fname\"\r\n                  name=\"firstName\"\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"firstName\"\r\n                  label=\"First Name\"\r\n                  error={fnameIsValid ? false : true}\r\n                  helperText={\r\n                    fnameIsValid ? \"\" : \"Should contain only alphabets\"\r\n                  }\r\n                  onBlur={this.validateName}\r\n                  autoFocus\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"lastName\"\r\n                  label=\"Last Name\"\r\n                  name=\"lastName\"\r\n                  autoComplete=\"lname\"\r\n                  error={lnameIsValid ? false : true}\r\n                  helperText={\r\n                    lnameIsValid ? \"\" : \"Should contain only alphabets\"\r\n                  }\r\n                  onBlur={this.validateName}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  autoComplete=\"email\"\r\n                  onBlur={this.setEmail}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <MuiPhoneNumber\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"phone\"\r\n                  label=\"Mobile Number\"\r\n                  name=\"phone\"\r\n                  defaultCountry={\"in\"}\r\n                  autoComplete=\"phone\"\r\n                 // onBlur={this.setPhone}\r\n                  onlyCountries={['in']}\r\n                  error={phoneIsValid ? false : true}\r\n                  helperText={\r\n                    phoneIsValid ? \"\" : \"Must begin with +91 and should be 10 digits in length.\"\r\n                  }\r\n                  onChange={this.validatePhone}\r\n\r\n                />\r\n              </Grid>\r\n              {phoneErrorMsg && <Typography style={{color:\"red\", fontSize:\"0.8rem\"}}>Please enter a valid Phone number.</Typography>}\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"date\"\r\n                  label=\"Birthday\"\r\n                  name=\"date\"\r\n                  type=\"date\"\r\n                  autoComplete=\"date\"\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  onBlur={this.setBirthday}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Password passwordsAreValid={this.passwordsAreValid} />\r\n\r\n            {responseOnError !== \"\" && (\r\n              <Typography className={classes.errorColor}>\r\n                {responseOnError}\r\n              </Typography>\r\n            )}\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n\r\n            <Grid container justify=\"flex-end\" style={{marginBottom:20}}>\r\n              <Grid item>\r\n                <Link to=\"/login\" style={{ textDecoration: \"none\", color: header }}>\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n      <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SignUp);\r\n","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\profile\\Profile.js",["187"],"import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport MuiPhoneNumber from \"material-ui-phone-number\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\r\nimport { getProfile } from \"../../utils/api\";\r\nimport { uploadImage } from \"../../utils/api\";\r\nimport { updateProfile } from \"../../utils/api\";\r\nimport { userProfilePhoto } from '../../config/apiConfig'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Loader from \"../../shared-components/Loader\";\r\nimport Footer from \"../../shared-components/footer/Footer\"\r\nimport Header from \"../../shared-components/header/Header\"\r\nimport { header, footer } from \"../../theme\";\r\n\r\nconst styles = (theme) => ({\r\n  profileInfoDiv: {\r\n    width: \"100vw\",\r\n    height: \"30vh\",\r\n    backgroundColor: \"grey\",\r\n  },\r\n  paper: {\r\n    paddingTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    margin: \"50px\",\r\n  },\r\n  cardStyle: {\r\n    minWidth: \"70vw\",\r\n    margin: '30px 0',\r\n    backgroundColor: \"#ECEFF1\"\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    height: 45,\r\n    borderRadius: 0\r\n  },\r\n\r\n  imageContainer: {\r\n    minWidth: \"100%\",\r\n    backgroundColor: \"#0A3D62\",\r\n    minHeight: \"30vh\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  cameraIcon: {\r\n    position: \"absolute\",\r\n    top: \"75%\",\r\n    right: \"-20px\",\r\n    size: 20,\r\n    backgroundColor: \"#d81b60\",\r\n    padding: \"9px\",\r\n  },\r\n\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  profileImg: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    padding: \"2px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  userIcon: {\r\n    color: \"grey\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  successMessageColor: {\r\n    color: \"green\",\r\n  },\r\n  failedMessageColor: {\r\n    color: \"red\",\r\n  },\r\n  loadingPanel: {\r\n    minHeight: \"100vh\",\r\n    minWidth: \"100vw\",\r\n    zIndex: 100,\r\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n\r\nclass Profile extends Component {\r\n  state = {\r\n    fnameIsValid: true,\r\n    lnameIsValid: true,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n    birthday: \"\",\r\n    imageUrl: null,\r\n    infoMessage: \"\",\r\n    loadProfileMessage: \"\",\r\n    imageUploadErrorMessage: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    getProfile().then((res) => {\r\n      if (res.status === 200) {\r\n        let userProfile = res.response;\r\n        const birthday = this.formatDate(userProfile.dateOfBirth);\r\n        this.setState({\r\n          loading: false,\r\n          loadProfileMessage: \"\",\r\n          firstName: userProfile.fullName.split(\" \")[0],\r\n          lastName: userProfile.fullName.split(\" \")[1],\r\n          email: userProfile.email,\r\n          phone: userProfile.phoneNumber,\r\n          birthday: birthday,\r\n          imageUrl: userProfile.imageUrl,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          loading: false,\r\n          loadProfileMessage: res.exception.errorMsg,\r\n        });\r\n      }\r\n    });\r\n  }\r\n  validateName = (event) => {\r\n    const field = event.target.name;\r\n    const name = event.target.value;\r\n    if (field === \"firstName\") {\r\n      if (!(name.match(/^[A-Za-z]+$/) || name === \"\"))\r\n        this.setState({\r\n          firstName: name,\r\n          fnameIsValid: false,\r\n        });\r\n      else\r\n        this.setState({\r\n          firstName: name,\r\n          fnameIsValid: true,\r\n        });\r\n    } else {\r\n      if (!(name.match(/^[A-Za-z]+$/) || name === \"\"))\r\n        this.setState({\r\n          lastName: name,\r\n          lnameIsValid: false,\r\n        });\r\n      else\r\n        this.setState({\r\n          lastName: name,\r\n          lnameIsValid: true,\r\n        });\r\n    }\r\n  };\r\n\r\n  onImageUpload = (event) => {\r\n    console.log(\"onImageupload called\");\r\n    const imageObj = event.target.files[0];\r\n    // Create an object of formData\r\n    const formData = new FormData();\r\n\r\n    // Update the formData object\r\n    formData.append(\"profilePhoto\", imageObj);\r\n\r\n    uploadImage(formData).then((res) => {\r\n      if (res.status === 200) {\r\n        const imageUrl = res.response.imageUrl;\r\n        this.setState({\r\n          imageUploadErrorMessage: \"\",\r\n          imageUrl,\r\n        });\r\n      } else\r\n        this.setState({\r\n          imageUploadErrorMessage: res.exception.errorMsg,\r\n        });\r\n    });\r\n  };\r\n\r\n  formatDate = (date) => {\r\n    let d = new Date(date),\r\n      month = \"\" + (d.getMonth() + 1),\r\n      day = \"\" + d.getDate(),\r\n      year = d.getFullYear();\r\n\r\n    if (month.length < 2) month = \"0\" + month;\r\n    if (day.length < 2) day = \"0\" + day;\r\n\r\n    return [year, month, day].join(\"-\");\r\n  };\r\n  //   validatePhone = (event) => {\r\n  //     const phone = event.target.value;\r\n  //     console.log(phone.length)  //15 for india\r\n  //   };\r\n\r\n  setBirthday = (event) => {\r\n    const birthday = event.target.value;\r\n    this.setState({\r\n      birthday,\r\n    });\r\n  };\r\n\r\n  setPhone = (event) => {\r\n    const phone = event.target.value;\r\n    this.setState({\r\n      phone,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"handleSubmit clicked\");\r\n    const {\r\n      fnameIsValid,\r\n      lnameIsValid,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n      birthday,\r\n      imageUrl,\r\n    } = this.state;\r\n    if (fnameIsValid === true && lnameIsValid === true) {\r\n      console.log(\"all fields contains valid inputs\");\r\n      this.setState({\r\n        loading: true,\r\n      });\r\n      let userInfo = {\r\n        fullName: `${firstName} ${lastName}`,\r\n        email,\r\n        phoneNumber: phone,\r\n        dateOfBirth: birthday,\r\n        imageUrl,\r\n      };\r\n      updateProfile(userInfo).then((res) => {\r\n        if (res.status === 200)\r\n          this.setState({\r\n            infoMessage: \"Profile Updated Successfully\",\r\n            loading: false,\r\n          });\r\n        else\r\n          this.setState({\r\n            infoMessage: res.exception.errorMsg,\r\n            loading: false,\r\n          });\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const {\r\n      fnameIsValid,\r\n      lnameIsValid,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n      birthday,\r\n      imageUrl,\r\n      infoMessage,\r\n      imageUploadErrorMessage,\r\n      loadProfileMessage,\r\n      loading,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n      {loading && <Loader />}\r\n      <Header />\r\n        <Container className={classes.imageContainer}>\r\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            {imageUploadErrorMessage !== \"\" && (\r\n              <Typography\r\n                style={{ marginTop: 5, marginBottom: 5 }}\r\n                className={classes.failedMessageColor}\r\n              >\r\n                {imageUploadErrorMessage}\r\n              </Typography>\r\n            )}\r\n\r\n            <input\r\n              accept=\"image/*\"\r\n              className={classes.input}\r\n              id=\"icon-button-file\"\r\n              type=\"file\"\r\n              onChange={this.onImageUpload}\r\n            />\r\n            {imageUrl === null ? (\r\n              <div\r\n                style={{ position: \"relative\", width: 100, marginBottom: 20 }}\r\n              >\r\n                <FontAwesomeIcon\r\n                  icon={faUser}\r\n                  size=\"7x\"\r\n                  className={classes.userIcon}\r\n                />\r\n\r\n                <label htmlFor=\"icon-button-file\">\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    className={classes.cameraIcon}\r\n                    component=\"span\"\r\n                  >\r\n                    <PhotoCamera />\r\n                  </IconButton>\r\n                </label>\r\n              </div>\r\n            ) : (\r\n                <div style={{ position: \"relative\", width: 110, height: 110, marginBottom: 10 }}>\r\n                  <img\r\n                    src={userProfilePhoto + imageUrl}\r\n                    alt=\"profile image\"\r\n                    className={classes.profileImg}\r\n                  />\r\n\r\n                  <label htmlFor=\"icon-button-file\">\r\n                    <IconButton\r\n                      color=\"primary\"\r\n                      className={classes.cameraIcon}\r\n                      component=\"span\"\r\n                    >\r\n                      <PhotoCamera />\r\n                    </IconButton>\r\n                  </label>\r\n                </div>\r\n              )}\r\n          </div>\r\n\r\n          <Typography variant=\"h5\" style={{ color: footer, marginRight: 20 }}>\r\n           {phone}\r\n          </Typography>\r\n        </Container>\r\n        <Container\r\n          className={classes.cardStyle}\r\n          component=\"main\"\r\n          maxWidth=\"xs\"\r\n        >\r\n          <CssBaseline />\r\n          <Grid container justify=\"center\">\r\n            <div className={classes.paper}>\r\n              {loadProfileMessage !== \"\" && (\r\n                <Typography className={classes.failedMessageColor}>\r\n                  {loadProfileMessage}\r\n                </Typography>\r\n              )}\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                My Profile\r\n              </Typography>\r\n              <form className={classes.form} onSubmit={this.handleSubmit}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      autoComplete=\"fname\"\r\n                      name=\"firstName\"\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"firstName\"\r\n                      label=\"First Name\"\r\n                      value={firstName}\r\n                      error={fnameIsValid ? false : true}\r\n                      helperText={\r\n                        fnameIsValid ? \"\" : \"Should contain only alphabets\"\r\n                      }\r\n                      onChange={this.validateName}\r\n                      autoFocus\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      name=\"lastName\"\r\n                      value={lastName}\r\n                      autoComplete=\"lname\"\r\n                      error={lnameIsValid ? false : true}\r\n                      helperText={\r\n                        lnameIsValid ? \"\" : \"Should contain only alphabets\"\r\n                      }\r\n                      onChange={this.validateName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      disabled\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email Address\"\r\n                      name=\"email\"\r\n                      value={email}\r\n                      type=\"email\"\r\n                      autoComplete=\"email\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <MuiPhoneNumber\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"phone\"\r\n                      label=\"Mobile Number\"\r\n                      name=\"phone\"\r\n                      value={phone}\r\n                      defaultCountry={\"in\"}\r\n                      autoComplete=\"phone\"\r\n                      onBlur={this.setPhone}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"date\"\r\n                      label=\"Birthday\"\r\n                      name=\"date\"\r\n                      value={birthday}\r\n                      type=\"date\"\r\n                      autoComplete=\"date\"\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                      onChange={this.setBirthday}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                >\r\n                  Update Changes\r\n                </Button>\r\n\r\n                <Grid container justify=\"flex-start\">\r\n                  <Grid item>\r\n                    <Typography\r\n                      className={\r\n                        infoMessage.includes(\"Successfully\")\r\n                          ? classes.successMessageColor\r\n                          : classes.failedMessageColor\r\n                      }\r\n                    >\r\n                      {infoMessage}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item>\r\n                    <Link to=\"/\" style={{ textDecoration: \"none\", color: header }}>Proceed to home</Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            </div>\r\n          </Grid>\r\n        </Container>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Profile);\r\n","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\footer\\Footer.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\Home.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\myBookings\\MyBookings.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\pageNotFound\\PageNotFound.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\theater.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\authedUser.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\theatersList.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\seatPlan.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\shared.js",["188"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\movie-container\\MovieContainer.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\theater.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\screen.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterCard.js",["189","190"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\error\\Error.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterContainer.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\ticket\\Ticket.js",[],{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":null,"fatal":true,"severity":2,"message":"195","line":84,"column":1},{"ruleId":"196","severity":1,"message":"197","line":8,"column":8,"nodeType":"198","messageId":"199","endLine":8,"endColumn":11},{"ruleId":"191","replacedBy":"200"},{"ruleId":"193","replacedBy":"201"},{"ruleId":"196","severity":1,"message":"197","line":8,"column":8,"nodeType":"198","messageId":"199","endLine":8,"endColumn":11},{"ruleId":"196","severity":1,"message":"202","line":8,"column":22,"nodeType":"198","messageId":"199","endLine":8,"endColumn":37},{"ruleId":"196","severity":1,"message":"203","line":8,"column":39,"nodeType":"198","messageId":"199","endLine":8,"endColumn":58},{"ruleId":"196","severity":1,"message":"204","line":10,"column":7,"nodeType":"198","messageId":"199","endLine":10,"endColumn":13},{"ruleId":"196","severity":1,"message":"204","line":23,"column":7,"nodeType":"198","messageId":"199","endLine":23,"endColumn":13},{"ruleId":"196","severity":1,"message":"204","line":34,"column":7,"nodeType":"198","messageId":"199","endLine":34,"endColumn":13},{"ruleId":"196","severity":1,"message":"204","line":134,"column":7,"nodeType":"198","messageId":"199","endLine":134,"endColumn":13},{"ruleId":"196","severity":1,"message":"205","line":150,"column":7,"nodeType":"198","messageId":"199","endLine":150,"endColumn":20},{"ruleId":"206","severity":1,"message":"207","line":321,"column":19,"nodeType":"208","endLine":325,"endColumn":21},{"ruleId":"196","severity":1,"message":"209","line":4,"column":59,"nodeType":"198","messageId":"199","endLine":4,"endColumn":73},{"ruleId":"196","severity":1,"message":"202","line":19,"column":30,"nodeType":"198","messageId":"199","endLine":19,"endColumn":45},{"ruleId":"196","severity":1,"message":"203","line":19,"column":47,"nodeType":"198","messageId":"199","endLine":19,"endColumn":66},"no-native-reassign",["210"],"no-negated-in-lhs",["211"],"Parsing error: Only one default export allowed per module.\n\n\u001b[0m \u001b[90m 82 | \u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m 83 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 84 | \u001b[39m\u001b[36mexport\u001b[39m \u001b[36mdefault\u001b[39m connect()(\u001b[33mApp\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m\u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m","no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar",["210"],["211"],"'buttonAvailable' is defined but never used.","'buttonAvailableText' is defined but never used.","'reqObj' is assigned a value but never used.","'phoneErrorMsg' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'setShowTimings' is defined but never used.","no-global-assign","no-unsafe-negation"]