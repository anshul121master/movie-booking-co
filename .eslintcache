[{"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\reportWebVitals.js":"1","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\middlewares\\index.js":"2","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\index.js":"3","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signin\\SignIn.js":"4","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\theater.js":"5","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\theme.js":"6","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\movie-container\\MovieContainer.js":"7","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\movie.js":"8","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\shared.js":"9","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\App.js":"10","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\index.js":"11","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\utils\\api.js":"12","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\Home.js":"13","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\moviesList.js":"14","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\movie.js":"15","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\middlewares\\logger.js":"16","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\theatersList.js":"17","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\seatPlan.js":"18","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\city.js":"19","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\authedUser.js":"20","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\authedUser.js":"21","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\city.js":"22","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\footer\\Footer.js":"23","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\header\\Header.js":"24","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\theater.js":"25","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\profile\\Profile.js":"26","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\config\\apiConfig.js":"27","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\ForgotPassword.js":"28","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\purchase\\payment-form\\PaymentForm.js":"29","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterContainer.js":"30","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterCard.js":"31","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\ticket\\Ticket.js":"32","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\Movie.js":"33","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\myBookings\\MyBookings.js":"34","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\movie-container\\components\\MovieCard.js":"35","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\myBookings\\bookingHistory\\BookingHistory.js":"36","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\City.js":"37","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\movie-details\\MovieDetails.js":"38","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\movie-container\\components\\MovieCarousel.js":"39","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\SignUp.js":"40","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\loading.js":"41","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\Copyright.js":"42","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\purchase\\Purchase.js":"43","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\error\\Error.js":"44","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\screen\\Screen.js":"45","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\loading.js":"46","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\screen.js":"47","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\Password.js":"48","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\screen.js":"49","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\ProtectedRoute.js":"50","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\Loader.js":"51","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\seatsAndPrice.js":"52","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\pageNotFound\\PageNotFound.js":"53"},{"size":362,"mtime":499162500000,"results":"54","hashOfConfig":"55"},{"size":156,"mtime":1606720032227,"results":"56","hashOfConfig":"55"},{"size":653,"mtime":1607610469454,"results":"57","hashOfConfig":"55"},{"size":6615,"mtime":1608039831455,"results":"58","hashOfConfig":"55"},{"size":247,"mtime":1607610469320,"results":"59","hashOfConfig":"55"},{"size":347,"mtime":1607955968359,"results":"60","hashOfConfig":"55"},{"size":3468,"mtime":1607691997724,"results":"61","hashOfConfig":"55"},{"size":394,"mtime":1606900214200,"results":"62","hashOfConfig":"55"},{"size":1857,"mtime":1607929926560,"results":"63","hashOfConfig":"55"},{"size":2483,"mtime":1608119570527,"results":"64","hashOfConfig":"55"},{"size":1130,"mtime":1607940912327,"results":"65","hashOfConfig":"55"},{"size":6668,"mtime":1608100453267,"results":"66","hashOfConfig":"55"},{"size":2319,"mtime":1608098680575,"results":"67","hashOfConfig":"55"},{"size":231,"mtime":1607610469319,"results":"68","hashOfConfig":"55"},{"size":237,"mtime":1606900214203,"results":"69","hashOfConfig":"55"},{"size":297,"mtime":1606720032275,"results":"70","hashOfConfig":"55"},{"size":241,"mtime":1607497903909,"results":"71","hashOfConfig":"55"},{"size":226,"mtime":1606900214204,"results":"72","hashOfConfig":"55"},{"size":232,"mtime":1606900214201,"results":"73","hashOfConfig":"55"},{"size":856,"mtime":1607929568300,"results":"74","hashOfConfig":"55"},{"size":242,"mtime":1607584538147,"results":"75","hashOfConfig":"55"},{"size":209,"mtime":1608020597106,"results":"76","hashOfConfig":"55"},{"size":2932,"mtime":1607937729243,"results":"77","hashOfConfig":"55"},{"size":10174,"mtime":1607955968359,"results":"78","hashOfConfig":"55"},{"size":627,"mtime":1606900214201,"results":"79","hashOfConfig":"55"},{"size":14103,"mtime":1608043630991,"results":"80","hashOfConfig":"55"},{"size":2009,"mtime":1608020140356,"results":"81","hashOfConfig":"55"},{"size":9138,"mtime":1607657741296,"results":"82","hashOfConfig":"55"},{"size":6016,"mtime":1608099901924,"results":"83","hashOfConfig":"55"},{"size":7226,"mtime":1608020140367,"results":"84","hashOfConfig":"55"},{"size":9677,"mtime":1608039977881,"results":"85","hashOfConfig":"55"},{"size":4130,"mtime":1607691997811,"results":"86","hashOfConfig":"55"},{"size":1004,"mtime":1607691997726,"results":"87","hashOfConfig":"55"},{"size":3911,"mtime":1607673242220,"results":"88","hashOfConfig":"55"},{"size":1782,"mtime":1607939222252,"results":"89","hashOfConfig":"55"},{"size":1858,"mtime":1607610469304,"results":"90","hashOfConfig":"55"},{"size":1414,"mtime":1607610469293,"results":"91","hashOfConfig":"55"},{"size":2754,"mtime":1607955968359,"results":"92","hashOfConfig":"55"},{"size":1079,"mtime":1608020140361,"results":"93","hashOfConfig":"55"},{"size":8982,"mtime":1608020628154,"results":"94","hashOfConfig":"55"},{"size":140,"mtime":1607544076655,"results":"95","hashOfConfig":"55"},{"size":450,"mtime":1607598591548,"results":"96","hashOfConfig":"55"},{"size":6586,"mtime":1608101468018,"results":"97","hashOfConfig":"55"},{"size":908,"mtime":1607610469313,"results":"98","hashOfConfig":"55"},{"size":11320,"mtime":1608039977882,"results":"99","hashOfConfig":"55"},{"size":200,"mtime":1607543423875,"results":"100","hashOfConfig":"55"},{"size":242,"mtime":1607610469320,"results":"101","hashOfConfig":"55"},{"size":3351,"mtime":1607713115392,"results":"102","hashOfConfig":"55"},{"size":179,"mtime":1607610469317,"results":"103","hashOfConfig":"55"},{"size":946,"mtime":1607669275726,"results":"104","hashOfConfig":"55"},{"size":1259,"mtime":1607775420598,"results":"105","hashOfConfig":"55"},{"size":322,"mtime":1607497903907,"results":"106","hashOfConfig":"55"},{"size":2481,"mtime":1608113670339,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"1m7sr9s",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"113"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"113"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"116"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"113"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\reportWebVitals.js",[],["227","228"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\middlewares\\index.js",[],["229","230"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\index.js",[],["231","232"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signin\\SignIn.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\theater.js",[],["233","234"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\theme.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\movie-container\\MovieContainer.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\movie.js",[],["235","236"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\shared.js",["237"],"import { setSelectedCity } from './city';\r\nimport { getAllMovies, setSelectedMovie } from './movie';\r\nimport { getMovies, getTheaters, getSeatPlan, lockSeats } from '../../utils/api';\r\nimport { getAllTheaters, setSeatPlan, setSelectedTheater, setShowTimings } from './theater';\r\nimport { setSelectedScreen } from './screen';\r\n\r\nexport const SET_SEATS_AND_PRICE = 'SET_SEATS_AND_PRICE'\r\n\r\nexport function setCityAndMoviesList(city) {\r\n    return (dispatch) => {\r\n        //dispatch selected city to store\r\n        dispatch(setSelectedCity(city));\r\n        //api call to fetch all movies in the selected city and dispatch the moviesList to store\r\n        getMovies(city.id)\r\n            .then(moviesList => dispatch(getAllMovies(moviesList)))\r\n    }\r\n}\r\n\r\nexport function setMovieAndTheaterList(movie, setMovie = true) {\r\n    return (dispatch, getState) => {\r\n        const { selectedCity } = getState();\r\n        if (setMovie) {\r\n            dispatch(setSelectedMovie(movie));\r\n        }\r\n        getTheaters(selectedCity.id, movie.movieId)\r\n            .then(theatersList => dispatch(getAllTheaters(theatersList)))\r\n    }\r\n}\r\n\r\nexport function setTheaterAndSeatPlan(theater, seatPlanId, screen) {\r\n    return (dispatch) => {\r\n        dispatch(setSelectedTheater(theater));\r\n\r\n        dispatch(setSelectedScreen(screen));\r\n\r\n        getSeatPlan(seatPlanId)\r\n            .then(seatPlan => dispatch(setSeatPlan(seatPlan)))\r\n    }\r\n}\r\n\r\nfunction lockSeatsAndPrice(selectedSeats, price) {\r\n    return {\r\n        type: SET_SEATS_AND_PRICE,\r\n        selectedSeats,\r\n        price\r\n    }\r\n}\r\n\r\nexport function setSeatsAndPrice(selectedSeats, seatPlanId, price) {\r\n    return (dispatch) => {\r\n        lockSeats(seatPlanId, selectedSeats).then(response => response ?\r\n            dispatch(lockSeatsAndPrice(selectedSeats, price)) : console.error('error'))\r\n    }\r\n}\r\n","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\App.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\index.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\utils\\api.js",["238","239","240"],"import { api, mockApi } from \"../config/apiConfig\";\r\n\r\nexport const mockEnabled = true;\r\nconst endpoints = mockEnabled ? mockApi : api;\r\n\r\n//api's for user journey\r\n\r\n//signin\r\nexport const login = (userCredentials) => {\r\n  let reqObj = {\r\n    method: \"POST\",\r\n    credentials: \"same-origin\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(userCredentials),\r\n  };\r\n  const url = endpoints.login();\r\n  return fetch(url).then(resp => resp.json());\r\n};\r\n\r\nexport const logout = () => {\r\n  let reqObj = {\r\n    method: \"POST\",\r\n    credentials: \"same-origin\",\r\n  };\r\n  const url = endpoints.logout();\r\n  return fetch(url, reqObj).then(resp => resp.json());\r\n};\r\n\r\n\r\n//signup\r\nexport const signup = (userInfo) => {\r\n  let reqObj = {\r\n    method: \"POST\",\r\n    credentials: \"same-origin\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(userInfo),\r\n  };\r\n  const url = endpoints.signup();\r\n  return fetch(url, reqObj).then((resp) => {\r\n    if (resp.ok) {\r\n      return resp.json().then(({ response }) => ({\r\n        status: resp.status,\r\n        response: \"!Verification link has been sent to your registered email id. Please verify your account before login.\"\r\n      }))\r\n    } else {\r\n      return resp.json().then(({ exception }) => ({\r\n        status: resp.status,\r\n        exception\r\n      }))\r\n    }\r\n  });\r\n};\r\n\r\nexport const getProfile = () => {\r\n  const url = endpoints.profile();\r\n  return fetch(url).then((resp) => {\r\n    if (resp.ok) {\r\n      return resp.json().then(({ response }) => ({\r\n        status: resp.status,\r\n        response\r\n      }))\r\n    }\r\n    else {\r\n      return resp.json().then(({ exception }) => ({\r\n        status: resp.status,\r\n        exception\r\n      }))\r\n    }\r\n  });\r\n};\r\n\r\n//uploadImage\r\nexport const uploadImage = (userInfo) => {\r\n  let reqObj = {\r\n    method: \"PUT\",\r\n    credentials: \"same-origin\",\r\n    body: userInfo,\r\n  };\r\n  const url = endpoints.imageUpload();\r\n  return fetch(url, reqObj).then((resp) => {\r\n    if (resp.ok) {\r\n      return resp.json().then(({ response }) => ({\r\n        status: resp.status,\r\n        response\r\n      }))\r\n    }\r\n    else {\r\n      return resp.json().then(({ exception }) => ({\r\n        status: resp.status,\r\n        exception\r\n      }))\r\n    }\r\n  });\r\n};\r\n\r\n//updateProfile\r\nexport const updateProfile = (userInfo) => {\r\n  let reqObj = {\r\n    method: \"PUT\",\r\n    credentials: \"same-origin\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(userInfo),\r\n  };\r\n  const url = endpoints.profileUpdate();\r\n  return fetch(url, reqObj).then((resp) => {\r\n    if (resp.ok) {\r\n      return resp.json().then(({ response }) => ({\r\n        status: resp.status,\r\n        response\r\n      }))\r\n    }\r\n    else {\r\n      return resp.json().then(({ exception }) => ({\r\n        status: resp.status,\r\n        exception\r\n      }))\r\n    }\r\n  });\r\n};\r\n\r\n//sendOtp\r\nexport const sendOtp = (emailObj) => {\r\n  let reqObj = {\r\n    method: \"POST\",\r\n    credentials: \"same-origin\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(emailObj),\r\n  };\r\n  const url = endpoints.getOtp();\r\n  return fetch(url, reqObj).then((resp) => {\r\n    if (resp.ok) {\r\n      return resp.json().then(({ response }) => ({\r\n        status: resp.status,\r\n        response\r\n      }))\r\n    }\r\n    else {\r\n      return resp.json().then(({ exception }) => ({\r\n        status: resp.status,\r\n        exception\r\n      }))\r\n    }\r\n  });\r\n};\r\n\r\n//resetPassword\r\nexport const resetPassword = (pwdDetails) => {\r\n  let reqObj = {\r\n    method: \"POST\",\r\n    credentials: \"same-origin\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(pwdDetails),\r\n  };\r\n  const url = endpoints.reset();\r\n  return fetch(url, reqObj).then((resp) => {\r\n    if (resp.ok) {\r\n      return resp.json().then(({ response }) => ({\r\n        status: resp.status,\r\n        response\r\n      }))\r\n    }\r\n    else {\r\n      return resp.json().then(({ exception }) => ({\r\n        status: resp.status,\r\n        exception\r\n      }))\r\n    }\r\n  });\r\n};\r\n\r\n//get all cities\r\nexport const getCities = () => {\r\n  const url = endpoints.cities();\r\n  return fetch(url).then((response) => response.json());\r\n};\r\n\r\n// get all movies in a particular city\r\nexport const getMovies = (cityId) => {\r\n  const url = endpoints.movies(cityId);\r\n  return fetch(url).then((response) => response.json());\r\n};\r\n\r\n//get all theaters for a particular movie\r\nexport const getTheaters = (cityId, movieId) => {\r\n  const url = endpoints.theaters(cityId, movieId);\r\n  return fetch(url).then((response) => response.json());\r\n};\r\n\r\n// get show timings for a particular movie in a particular theater\r\nexport const getScreens = (movieId, theaterId) => {\r\n  const url = endpoints.screens(movieId, theaterId);\r\n  return fetch(url).then((res) => res.json());\r\n};\r\n//get seat plan\r\nexport const getSeatPlan = (seatPlanId) => {\r\n  const url = endpoints.seatPlan(seatPlanId);\r\n  return fetch(url).then((res) => res.json());\r\n};\r\n\r\nexport const lockSeats = (seatPlanId, selectedSeats) => {\r\n  let reqObj = {\r\n    method: \"PUT\",\r\n    credentials: \"same-origin\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(selectedSeats),\r\n  }\r\n  const url = endpoints.lockSeats(seatPlanId);\r\n  return fetch(url).then((response) => {\r\n    if (response.ok) return true\r\n    else\r\n      return false\r\n  })\r\n}\r\n\r\nexport const purchaseTickets = ({ theaterDetails, screenName, selectedSeats, price, movieName, time, date, seatPlanId }) => {\r\n  let reqObj = {\r\n    method: \"POST\",\r\n    credentials: \"same-origin\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      theaterDetails,\r\n      dateOfShow: date,\r\n      showTiming: time,\r\n      screenName,\r\n      movieName,\r\n      amount: price,\r\n      bookedSeats: selectedSeats,\r\n      seatPlanId\r\n    }),\r\n  }\r\n  const url = endpoints.booking();\r\n  return fetch(url).then((response) => {\r\n    if (response.ok) return response.json()\r\n    else\r\n      return console.error(\"Error\")\r\n  })\r\n}\r\n\r\n//get all bookings for a particular user\r\nexport const getAllBookings = () => {\r\n  const url = endpoints.bookingHistory();\r\n  return fetch(url).then((res) => res.json());\r\n}\r\n\r\n// cancel a particular booking using bookingId\r\nexport const cancelBooking = (bookingId) => {\r\n  let reqObj = {\r\n    method: \"PUT\",\r\n    credentials: \"same-origin\"\r\n  };\r\n  const url = endpoints.cancelBooking(bookingId);\r\n  return fetch(url, reqObj).then((response) => {\r\n    if (response.ok) return response.json()\r\n  })\r\n}\r\n","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\Home.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\moviesList.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\movie.js",[],["241","242"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\middlewares\\logger.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\theatersList.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\seatPlan.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\city.js",[],["243","244"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\authedUser.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\authedUser.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\city.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\footer\\Footer.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\header\\Header.js",["245"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\theater.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\profile\\Profile.js",["246"],"import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport MuiPhoneNumber from \"material-ui-phone-number\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\r\nimport { getProfile } from \"../../utils/api\";\r\nimport { uploadImage } from \"../../utils/api\";\r\nimport { updateProfile } from \"../../utils/api\";\r\nimport { userProfilePhoto } from '../../config/apiConfig'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Loader from \"../../shared-components/Loader\";\r\nimport Footer from \"../../shared-components/footer/Footer\"\r\n\r\n\r\n\r\nconst styles = (theme) => ({\r\n  profileInfoDiv: {\r\n    width: \"100vw\",\r\n    height: \"30vh\",\r\n    backgroundColor: \"grey\",\r\n  },\r\n  paper: {\r\n    paddingTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    margin: \"50px\",\r\n  },\r\n  cardStyle: {\r\n    marginTop: 30,\r\n    minWidth: \"70vw\",\r\n    margin: 0,\r\n    backgroundColor: \"#ECEFF1\"\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    height: 45,\r\n    borderRadius: 0\r\n  },\r\n\r\n  imageContainer: {\r\n    minWidth: \"100%\",\r\n    backgroundColor: \"#0A3D62\",\r\n    minHeight: \"30vh\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  cameraIcon: {\r\n    position: \"absolute\",\r\n    top: \"75%\",\r\n    right: \"-20px\",\r\n    size: 20,\r\n    backgroundColor: \"#d81b60\",\r\n    padding: \"9px\",\r\n  },\r\n\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  profileImg: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    padding: \"2px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  userIcon: {\r\n    color: \"grey\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  successMessageColor: {\r\n    color: \"green\",\r\n  },\r\n  failedMessageColor: {\r\n    color: \"red\",\r\n  },\r\n  loadingPanel: {\r\n    minHeight: \"100vh\",\r\n    minWidth: \"100vw\",\r\n    zIndex: 100,\r\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n\r\nclass Profile extends Component {\r\n  state = {\r\n    fnameIsValid: true,\r\n    lnameIsValid: true,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n    birthday: \"\",\r\n    imageUrl: null,\r\n    infoMessage: \"\",\r\n    loadProfileMessage: \"\",\r\n    imageUploadErrorMessage: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    getProfile().then((res) => {\r\n      if (res.status === 200) {\r\n        let userProfile = res.response;\r\n        const birthday = this.formatDate(userProfile.dateOfBirth);\r\n        this.setState({\r\n          loading: false,\r\n          loadProfileMessage: \"\",\r\n          firstName: userProfile.fullName.split(\" \")[0],\r\n          lastName: userProfile.fullName.split(\" \")[1],\r\n          email: userProfile.email,\r\n          phone: userProfile.phoneNumber,\r\n          birthday: birthday,\r\n          imageUrl: userProfile.imageUrl,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          loading: false,\r\n          loadProfileMessage: res.exception.errorMsg,\r\n        });\r\n      }\r\n    });\r\n  }\r\n  validateName = (event) => {\r\n    const field = event.target.name;\r\n    const name = event.target.value;\r\n    if (field === \"firstName\") {\r\n      if (!(name.match(/^[A-Za-z]+$/) || name === \"\"))\r\n        this.setState({\r\n          firstName: name,\r\n          fnameIsValid: false,\r\n        });\r\n      else\r\n        this.setState({\r\n          firstName: name,\r\n          fnameIsValid: true,\r\n        });\r\n    } else {\r\n      if (!(name.match(/^[A-Za-z]+$/) || name === \"\"))\r\n        this.setState({\r\n          lastName: name,\r\n          lnameIsValid: false,\r\n        });\r\n      else\r\n        this.setState({\r\n          lastName: name,\r\n          lnameIsValid: true,\r\n        });\r\n    }\r\n  };\r\n\r\n  onImageUpload = (event) => {\r\n    console.log(\"onImageupload called\");\r\n    const imageObj = event.target.files[0];\r\n    // Create an object of formData\r\n    const formData = new FormData();\r\n\r\n    // Update the formData object\r\n    formData.append(\"profilePhoto\", imageObj);\r\n\r\n    uploadImage(formData).then((res) => {\r\n      if (res.status === 200) {\r\n        const imageUrl = res.response.imageUrl;\r\n        this.setState({\r\n          imageUploadErrorMessage: \"\",\r\n          imageUrl,\r\n        });\r\n      } else\r\n        this.setState({\r\n          imageUploadErrorMessage: res.exception.errorMsg,\r\n        });\r\n    });\r\n  };\r\n\r\n  formatDate = (date) => {\r\n    let d = new Date(date),\r\n      month = \"\" + (d.getMonth() + 1),\r\n      day = \"\" + d.getDate(),\r\n      year = d.getFullYear();\r\n\r\n    if (month.length < 2) month = \"0\" + month;\r\n    if (day.length < 2) day = \"0\" + day;\r\n\r\n    return [year, month, day].join(\"-\");\r\n  };\r\n  //   validatePhone = (event) => {\r\n  //     const phone = event.target.value;\r\n  //     console.log(phone.length)  //15 for india\r\n  //   };\r\n\r\n  setBirthday = (event) => {\r\n    const birthday = event.target.value;\r\n    this.setState({\r\n      birthday,\r\n    });\r\n  };\r\n\r\n  setPhone = (event) => {\r\n    const phone = event.target.value;\r\n    this.setState({\r\n      phone,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"handleSubmit clicked\");\r\n    const {\r\n      fnameIsValid,\r\n      lnameIsValid,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n      birthday,\r\n      imageUrl,\r\n    } = this.state;\r\n    if (fnameIsValid === true && lnameIsValid === true) {\r\n      console.log(\"all fields contains valid inputs\");\r\n      this.setState({\r\n        loading: true,\r\n      });\r\n      let userInfo = {\r\n        fullName: `${firstName} ${lastName}`,\r\n        email,\r\n        phoneNumber: phone,\r\n        dateOfBirth: birthday,\r\n        imageUrl,\r\n      };\r\n      updateProfile(userInfo).then((res) => {\r\n        if (res.status === 200)\r\n          this.setState({\r\n            infoMessage: \"Profile Updated Successfully\",\r\n            loading: false,\r\n          });\r\n        else\r\n          this.setState({\r\n            infoMessage: res.exception.errorMsg,\r\n            loading: false,\r\n          });\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const {\r\n      fnameIsValid,\r\n      lnameIsValid,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n      birthday,\r\n      imageUrl,\r\n      infoMessage,\r\n      imageUploadErrorMessage,\r\n      loadProfileMessage,\r\n      loading,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n      {loading && <Loader />}\r\n        <Container className={classes.imageContainer}>\r\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            {imageUploadErrorMessage !== \"\" && (\r\n              <Typography\r\n                style={{ marginTop: 5, marginBottom: 5 }}\r\n                className={classes.failedMessageColor}\r\n              >\r\n                {imageUploadErrorMessage}\r\n              </Typography>\r\n            )}\r\n\r\n            <input\r\n              accept=\"image/*\"\r\n              className={classes.input}\r\n              id=\"icon-button-file\"\r\n              type=\"file\"\r\n              onChange={this.onImageUpload}\r\n            />\r\n            {imageUrl === null ? (\r\n              <div\r\n                style={{ position: \"relative\", width: 100, marginBottom: 20 }}\r\n              >\r\n                <FontAwesomeIcon\r\n                  icon={faUser}\r\n                  size=\"7x\"\r\n                  className={classes.userIcon}\r\n                />\r\n\r\n                <label htmlFor=\"icon-button-file\">\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    className={classes.cameraIcon}\r\n                    component=\"span\"\r\n                  >\r\n                    <PhotoCamera />\r\n                  </IconButton>\r\n                </label>\r\n              </div>\r\n            ) : (\r\n                <div style={{ position: \"relative\", width: 110, height: 110, marginBottom: 10 }}>\r\n                  <img\r\n                    src={userProfilePhoto + imageUrl}\r\n                    alt=\"profile image\"\r\n                    className={classes.profileImg}\r\n                  />\r\n\r\n                  <label htmlFor=\"icon-button-file\">\r\n                    <IconButton\r\n                      color=\"primary\"\r\n                      className={classes.cameraIcon}\r\n                      component=\"span\"\r\n                    >\r\n                      <PhotoCamera />\r\n                    </IconButton>\r\n                  </label>\r\n                </div>\r\n              )}\r\n          </div>\r\n\r\n          <Typography variant=\"h5\" style={{ color: \"white\", marginRight: 20 }}>\r\n            Welcome {firstName}! 😊\r\n          </Typography>\r\n        </Container>\r\n        <Container\r\n          className={classes.cardStyle}\r\n          component=\"main\"\r\n          maxWidth=\"xs\"\r\n        >\r\n          <CssBaseline />\r\n          <Grid container justify=\"center\">\r\n            <div className={classes.paper}>\r\n              {loadProfileMessage !== \"\" && (\r\n                <Typography className={classes.failedMessageColor}>\r\n                  {loadProfileMessage}\r\n                </Typography>\r\n              )}\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                My Profile\r\n              </Typography>\r\n              <form className={classes.form} onSubmit={this.handleSubmit}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      autoComplete=\"fname\"\r\n                      name=\"firstName\"\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"firstName\"\r\n                      label=\"First Name\"\r\n                      value={firstName}\r\n                      error={fnameIsValid ? false : true}\r\n                      helperText={\r\n                        fnameIsValid ? \"\" : \"Should contain only alphabets\"\r\n                      }\r\n                      onChange={this.validateName}\r\n                      autoFocus\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      name=\"lastName\"\r\n                      value={lastName}\r\n                      autoComplete=\"lname\"\r\n                      error={lnameIsValid ? false : true}\r\n                      helperText={\r\n                        lnameIsValid ? \"\" : \"Should contain only alphabets\"\r\n                      }\r\n                      onChange={this.validateName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      disabled\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email Address\"\r\n                      name=\"email\"\r\n                      value={email}\r\n                      type=\"email\"\r\n                      autoComplete=\"email\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <MuiPhoneNumber\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"phone\"\r\n                      label=\"Mobile Number\"\r\n                      name=\"phone\"\r\n                      value={phone}\r\n                      defaultCountry={\"in\"}\r\n                      autoComplete=\"phone\"\r\n                      onBlur={this.setPhone}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"date\"\r\n                      label=\"Birthday\"\r\n                      name=\"date\"\r\n                      value={birthday}\r\n                      type=\"date\"\r\n                      autoComplete=\"date\"\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                      onChange={this.setBirthday}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                >\r\n                  Update Changes\r\n                </Button>\r\n\r\n                <Grid container justify=\"flex-start\">\r\n                  <Grid item>\r\n                    <Typography\r\n                      className={\r\n                        infoMessage.includes(\"Successfully\")\r\n                          ? classes.successMessageColor\r\n                          : classes.failedMessageColor\r\n                      }\r\n                    >\r\n                      {infoMessage}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item>\r\n                    <Link to=\"/\">Proceed to home</Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            </div>\r\n          </Grid>\r\n        </Container>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Profile);\r\n","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\config\\apiConfig.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\ForgotPassword.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\purchase\\payment-form\\PaymentForm.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterContainer.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\theater-container\\TheaterCard.js",["247","248"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getScreens } from '../../../utils/api'\r\nimport { setTheaterAndSeatPlan } from '../../../store/actions/shared'\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport compose from 'recompose/compose';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Button from '@material-ui/core/Button';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { header, headerText, buttonAvailable, buttonAvailableText } from '../../../theme'\r\nimport { Redirect } from 'react-router-dom';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst styles = (theme) => ({\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n        backgroundColor: header,\r\n        color: headerText\r\n    },\r\n    action: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    content: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n});\r\n\r\n\r\nclass TheaterCard extends Component {\r\n    state = {\r\n        expanded: false,\r\n        screens: null,\r\n        screenTimesArray: [],\r\n        open: false,\r\n        time: '',\r\n        redirect: false,\r\n        error: null\r\n\r\n    }\r\n\r\n    //when show timing btn is clicked\r\n    getScreenObject = (theater) => {\r\n        const { selectedMovie } = this.props;\r\n        if (this.state.screens === null && this.state.screenTimesArray.length === 0) {\r\n            getScreens(selectedMovie.movieId, theater.theaterId)\r\n                .then((screens) => {\r\n                    if (screens.exception === null) {\r\n                        let screenTimeArray = []\r\n                        screens.response.forEach(screen => {\r\n                            screenTimeArray = screenTimeArray.concat(screen.screenTimes.map(time => time.showTiming))\r\n                        })\r\n\r\n                        this.setState(currentState => {\r\n                            return {\r\n                                screens: screens.response,\r\n                                screenTimesArray: screenTimeArray,\r\n                                expanded: !currentState.expanded,\r\n                            }\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            error: screens.exception\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            this.setState(currentState => {\r\n                return {\r\n                    expanded: !currentState.expanded,\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    //when clicked on any show time\r\n    handleSelectedShowTime = (theater, time, selectedDate) => {\r\n        // format YYYY-MM-DD\r\n        const { screens } = this.state;\r\n        const screen = screens.filter(screen => screen.screenTimes\r\n            .map(screenTime => screenTime.showTiming).includes(time))\r\n        const screenTime = screen[0].screenTimes.filter(screenTime => screenTime.showTiming === time)\r\n        const seatPlanId = screenTime[0].showDateList.filter\r\n            ((showDate => showDate.moviePlayingDate.split('T')[0] === selectedDate))[0].seatPlanId\r\n        //get seatPlanId from state based on time(S20) and date(2020-11-30)\r\n\r\n        this.props.dispatch(setTheaterAndSeatPlan(theater, seatPlanId, screen[0]))\r\n        //navigate to seat plan page\r\n    }\r\n\r\n    handleExpandClick = () => {\r\n        if (!this.state.expanded) {\r\n            this.getScreenObject(this.props.theater)\r\n        }\r\n        else {\r\n            this.setState({\r\n                expanded: false\r\n            })\r\n        }\r\n    }\r\n\r\n    handleClickOpen = (time) => {\r\n        this.setState({\r\n            open: true,\r\n            time: time\r\n        })\r\n    };\r\n\r\n    handleClose = (redirect, theater, time, selectedDate) => {\r\n        if (redirect) {\r\n            this.handleSelectedShowTime(theater, time, selectedDate)\r\n        }\r\n        this.setState({\r\n            open: false,\r\n            redirect\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const { theater, classes, selectedDate } = this.props;\r\n        const { screenTimesArray, error } = this.state;\r\n        return (\r\n            (error === null) ?\r\n                (this.state.redirect ? (<Redirect to={{ pathname: '/screen' }} />) :\r\n                    (\r\n                        <div><Card className=\"theater-card\">\r\n                            <CardHeader\r\n                                avatar={\r\n                                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                                        {theater.rating}\r\n                                    </Avatar>\r\n                                }\r\n                                title={theater.theaterName}\r\n                                subheader={theater.address.area + \", \" + theater.address.city + \", \" + theater.address.pincode + \", \" + theater.address.state}\r\n                            />\r\n                            <CardActions className={classes.action}>\r\n                                <Tooltip title=\"Expand to check on movie screening times\" aria-label=\"add\">\r\n                                    <IconButton\r\n                                        className={clsx(classes.expand, {\r\n                                            [classes.expandOpen]: this.state.expanded,\r\n                                        })}\r\n                                        aria-expanded={this.state.expanded}\r\n                                        aria-label=\"show more\"\r\n                                        onClick={this.handleExpandClick}\r\n                                    >\r\n                                        <ExpandMoreIcon />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </CardActions>\r\n                            <Collapse in={this.state.expanded} timeout=\"auto\" unmountOnExit>\r\n                                <CardContent className={classes.content}>\r\n                                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">Show Timings :</Typography>\r\n                                    {screenTimesArray.map(time =>\r\n                                        <Button className='timebutton' style={{ margin: 7 }} onClick={() => this.handleClickOpen(time)}\r\n                                            disabled={selectedDate <= new Date().toISOString().split('T')[0] && new Date().getHours() > time.split('S')[1]}>\r\n                                            {time.split('S')[1]}:00\r\n                                </Button>\r\n                                    )}\r\n                                </CardContent>\r\n                            </Collapse>\r\n                        </Card>\r\n                            <Dialog\r\n                                open={this.state.open}\r\n                                onClose={this.handleClose}\r\n                                aria-labelledby=\"alert-dialog-title\"\r\n                                aria-describedby=\"alert-dialog-description\"\r\n                            >\r\n                                <DialogTitle id=\"alert-dialog-title\">{\"Do you want to navigate to seat selection page?\"}</DialogTitle>\r\n                                <DialogContent>\r\n                                    <DialogContentText id=\"alert-dialog-description\">\r\n                                        Do you want to navigate to seat selection page for the selected show-time tickets?\r\n                              </DialogContentText>\r\n                                </DialogContent>\r\n                                <DialogActions>\r\n                                    <Button onClick={() => this.handleClose(false)}>\r\n                                        No\r\n                                        </Button>\r\n                                    <Button onClick={() => this.handleClose(true, theater, this.state.time, this.props.selectedDate)} autoFocus>\r\n                                        Yes\r\n                                        </Button>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n                        </div>)\r\n                ) : <Redirect to={{\r\n                    pathname: '/error',\r\n                    state: {\r\n                        exception: error\r\n                    }\r\n                }} />)\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ selectedMovie }, ownProps) {\r\n    const { theater, selectedDate } = ownProps;\r\n    return {\r\n        theater,\r\n        selectedMovie,\r\n        selectedDate\r\n    }\r\n}\r\n\r\nexport default compose(withStyles(styles), connect(mapStateToProps))(TheaterCard);\r\n\r\n\r\n","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\ticket\\Ticket.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\Movie.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\myBookings\\MyBookings.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\movie-container\\components\\MovieCard.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\myBookings\\bookingHistory\\BookingHistory.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\City.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\movie\\movie-details\\MovieDetails.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\home\\movie-container\\components\\MovieCarousel.js",["249"],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\SignUp.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\loading.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\Copyright.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\purchase\\Purchase.js",["250"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Ticket from '../../shared-components/ticket/Ticket'\r\nimport PaymentForm from './payment-form/PaymentForm'\r\nimport { ArrowBackIosRounded } from '@material-ui/icons'\r\nimport { headerText, } from '../../theme'\r\nimport { IconButton } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport { purchaseTickets } from '../../utils/api'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport Loader from \"../../shared-components/Loader\"\r\n\r\nclass Purchase extends Component {\r\n\r\n    state = {\r\n        bookingStatus: '',\r\n        exception: null,\r\n        open: false,\r\n        loading: false\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            open: false,\r\n            exception: null\r\n        })\r\n    };\r\n\r\n    purchaseTicket = (event) => {\r\n        event.preventDefault()\r\n\r\n        const { selectedTheater, seatsAndPrice, selectedMovie, selectedScreen, seatPlan } = this.props\r\n        const { loading } = this.state\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        purchaseTickets({\r\n            theaterDetails: selectedTheater.theaterName + \" \" + selectedTheater.address.city,\r\n            screenName: selectedScreen.screenName,\r\n            selectedSeats: seatsAndPrice.selectedSeats,\r\n            price: seatsAndPrice.price,\r\n            movieName: selectedMovie.name,\r\n            time: this.getDateAndTime(seatPlan, selectedScreen).time,\r\n            date: this.getDateAndTime(seatPlan, selectedScreen).date,\r\n            seatPlanId: seatPlan.response.seatPlanId\r\n        }).then(\r\n            response => {\r\n                if (response.response !== null && response.response.bookingStatus === 'BOOKED') {\r\n                    this.setState({\r\n                        bookingStatus: 'BOOKED'\r\n                    })\r\n                }else {\r\n                    this.setState({\r\n                        exception: response.exception,\r\n                        open:true\r\n                    })\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    getDateAndTime = (seatPlan, selectedScreen) => {\r\n\r\n        let time, date\r\n\r\n        selectedScreen.screenTimes.forEach(screenTime => {\r\n            const selectedDate = screenTime.showDateList.filter(showDate => showDate.seatPlanId === seatPlan.response.seatPlanId)\r\n            if (selectedDate.length !== 0) {\r\n                time = screenTime.showTiming\r\n                date = selectedDate[0].moviePlayingDate.split('T')[0]\r\n            }\r\n        })\r\n\r\n        return { time, date }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { selectedTheater, seatsAndPrice, selectedMovie, selectedScreen, seatPlan } = this.props\r\n        const {exception, loading} = this.state;\r\n        return (\r\n            <div style={{ minHeight: '100vh', width: '100%', margin: 0, padding: 0 }}>\r\n            {loading && <Loader />}\r\n                <div className='screen-header'>\r\n                    <IconButton >\r\n                      { this.state.bookingStatus === \"\" &&<Link style={{ textDecoration: 'none' }} to={{\r\n                            pathname: \"/screen\",\r\n                        }}><ArrowBackIosRounded style={{ color: headerText }} /></Link>}\r\n                    </IconButton>\r\n                    <span>{selectedMovie.name}</span>\r\n                    <span style={{ color: 'darkgrey', marginLeft: '10px', fontSize: '0.75em' }}>\r\n                        {selectedTheater.theaterName + \" \" + selectedTheater.address.city}</span>\r\n                    <div className='screen-info'>\r\n                        <div className='info'>\r\n                            Purchase tickets\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='purchase-container'>\r\n                    <PaymentForm purchaseTicket={this.purchaseTicket} bookingStatus={this.state.bookingStatus} />\r\n                    <Ticket\r\n                        theater={{\r\n                            \"screenName\": selectedScreen.screenName,\r\n                            \"theaterDetails\": selectedTheater.theaterName + \" \" + selectedTheater.address.city,\r\n                        }}\r\n                        selectedSeats={seatsAndPrice.selectedSeats === undefined ? [] : seatsAndPrice.selectedSeats}\r\n                        price={seatsAndPrice.price}\r\n                        movie={{\r\n                            \"name\": selectedMovie.name,\r\n                            \"genre\": selectedMovie.genre,\r\n                        }}\r\n                        time={this.getDateAndTime(seatPlan, selectedScreen).time}\r\n                        date={this.getDateAndTime(seatPlan, selectedScreen).date}\r\n                        bookingStatus={this.state.bookingStatus}\r\n                    />\r\n                </div>\r\n                {(exception !== null && <Dialog\r\n                    open={this.state.open}\r\n                    onClose={this.handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                            <DialogTitle id=\"alert-dialog-title\">{`Payment failed`}</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText id=\"alert-dialog-description\">\r\n                                    {`Payment Failed with the message ${exception.errorMsg} and code ${exception.code}. Please try again.`}\r\n                              </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={() => this.handleClose()} autoFocus>\r\n                                    OK\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog> )}\r\n                        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ selectedTheater, seatsAndPrice, selectedMovie, selectedScreen, seatPlan }) => {\r\n    return { selectedTheater, seatsAndPrice, selectedMovie, selectedScreen, seatPlan }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Purchase)","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\error\\Error.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\screen\\Screen.js",["251","252"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Card from '@material-ui/core/Card';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport compose from 'recompose/compose';\r\nimport { CardContent, Typography, IconButton, Button, Tooltip } from '@material-ui/core';\r\nimport { ArrowBackIosRounded } from '@material-ui/icons'\r\nimport { headerText, buttonAvailable, buttonAvailableText } from '../../theme'\r\nimport { setSeatsAndPrice } from '../../store/actions/shared'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport Loader from '../../shared-components/Loader'\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        width: '98%',\r\n        borderBottom: 'none',\r\n        borderTop: 'none',\r\n        overFlow: 'auto',\r\n    },\r\n\r\n})\r\n\r\nclass Screen extends Component {\r\n    state = {\r\n        selectedSeats: [],\r\n        price: 0,\r\n        redirect: false\r\n    }\r\n\r\n    calculatePrice(theater, selectedSeats) {\r\n        let price = 0;\r\n        selectedSeats.forEach(seat => {\r\n            if (seat.charAt(0) === \"G\") {\r\n                price = price + theater.priceOfDifferentSeatType.GOLD;\r\n            }\r\n            else if (seat.charAt(0) === \"P\") {\r\n                price = price + theater.priceOfDifferentSeatType.PLATINUM;\r\n            }\r\n            else if (seat.charAt(0) === \"D\") {\r\n                price = price + theater.priceOfDifferentSeatType.DIAMOND;\r\n            }\r\n        })\r\n        return price;\r\n    }\r\n\r\n    selectSeat = (seat) => {\r\n        this.setState(currentState => {\r\n            let selectedSeats = []\r\n            let price = 0\r\n            if (currentState.selectedSeats.includes(seat)) {\r\n                selectedSeats = currentState.selectedSeats.filter(seatValue => seatValue !== seat)\r\n                price = this.calculatePrice(this.props.selectedScreen, selectedSeats)\r\n            }\r\n            else {\r\n                selectedSeats = currentState.selectedSeats.concat(seat)\r\n                price = this.calculatePrice(this.props.selectedScreen, selectedSeats)\r\n            }\r\n            return {\r\n                selectedSeats: selectedSeats,\r\n                price: price\r\n            }\r\n        })\r\n    }\r\n\r\n    purchaseSeats = () => {\r\n        /*Redirect to payment page and store state information in redux store*/\r\n        this.props.dispatch(setSeatsAndPrice(this.state.selectedSeats, this.props.seatPlan.response.seatPlanId, this.state.price))\r\n        this.setState({\r\n            redirect: true\r\n        })\r\n    }\r\n\r\n    createSeatMap = (selectedScreen) => {\r\n        let seatMap = [];\r\n        Object.keys(selectedScreen.noOfRowsPerSeatType).forEach(seatType => {\r\n            let seatTypeMap = [];\r\n            Array.from(Array(selectedScreen.noOfRowsPerSeatType[seatType]).keys()).forEach(\r\n                (row) => {\r\n                    let seatRow = [];\r\n                    Array.from(Array(selectedScreen.columns).keys()).forEach(\r\n                        (col) => {\r\n                            seatRow.push(seatType.charAt(0) + 'R' + (row + 1) + 'C' + + (col + 1))\r\n                        }\r\n                    )\r\n                    seatTypeMap.push(seatRow);\r\n                }\r\n            )\r\n            seatMap.push(seatTypeMap)\r\n        })\r\n\r\n        return seatMap;\r\n    }\r\n\r\n    render() {\r\n        const { seatPlan, selectedScreen, selectedTheater, selectedMovie, classes } = this.props\r\n\r\n        const seatMap = Object.keys(selectedMovie).length === 0 ? [] : this.createSeatMap(selectedScreen)\r\n        return (\r\n            Object.keys(selectedMovie).length === 0 ? <Redirect to=\"/\" /> :\r\n                this.state.redirect ? (<Redirect to={{ pathname: '/purchase' }} />) : (\r\n                    <div style={{ minHeight: '100vh', width: '100%', margin: 0, padding: 0 }}>\r\n                        <div className='screen-header'>\r\n                            <IconButton >\r\n                                <Link style={{ textDecoration: 'none' }} to={{\r\n                                    pathname: \"/movie\",\r\n                                }}><ArrowBackIosRounded style={{ color: headerText }} /></Link>\r\n                            </IconButton>\r\n                            <span>{selectedMovie.name}</span>\r\n\r\n                            <span style={{ color: 'darkgrey', marginLeft: '10px', fontSize: '0.75em' }}>\r\n                                {selectedTheater.theaterName + \" \" + selectedTheater.address.city}</span>\r\n                            <div className='screen-info'>\r\n                                <div className='info'>\r\n                                    <div className='seat' style={{ fontSize: '0.7em', backgroundColor: 'white', cursor: 'default' }}>Available Seats</div>\r\n                                    <div className='seat chosen' style={{ fontSize: '0.7em', cursor: 'default' }}>Selected Seats</div>\r\n                                    <Tooltip title=\"Other users have booked this seat\" aria-label=\"add\">\r\n                                        <div className='seat booked' style={{ fontSize: '0.7em' }}>Booked Seats</div>\r\n                                    </Tooltip>\r\n                                    <Tooltip title=\"Other users have locked these seats but payment is yet to be made\" aria-label=\"add\">\r\n                                        <div className='seat locked' style={{ fontSize: '0.7em' }}>Locked Seats</div>\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='seat-container'>\r\n                            {Object.keys(seatPlan).length === 0 ?\r\n                                <Loader />\r\n                                : (seatPlan.exception === null ? (<Card className={classes.root} variant=\"outlined\">\r\n                                    {Object.keys(selectedScreen.noOfRowsPerSeatType).map((seatType, index) => (\r\n                                        <CardContent key={seatType}>\r\n                                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                                {seatType + ' - Rs. ' + selectedScreen.priceOfDifferentSeatType[seatType]}\r\n                                            </Typography>\r\n                                            <div className='seat-map'>\r\n                                                {seatMap[index].map((row, rowindex) => (\r\n                                                    <div className='seat-row' key={row}>\r\n                                                        {seatMap[index][rowindex].map(\r\n                                                            (col, colIndex) => (\r\n                                                                (seatPlan.response.bookedSeats !== undefined && seatPlan.response.bookedSeats.includes(seatMap[index][rowindex][colIndex]) ?\r\n                                                                    <Tooltip title=\"Other user booked this seat\" aria-label=\"add\">\r\n                                                                        <div className='seat booked' key={seatMap[index][rowindex][colIndex]}>\r\n                                                                            {seatMap[index][rowindex][colIndex].split('C')[1]}\r\n                                                                        </div>\r\n                                                                    </Tooltip>\r\n                                                                    : (this.state.selectedSeats.includes(seatMap[index][rowindex][colIndex]) ?\r\n                                                                        <div className='seat chosen' key={seatMap[index][rowindex][colIndex]}\r\n                                                                            onClick={() => this.selectSeat(seatMap[index][rowindex][colIndex])}\r\n                                                                        >\r\n                                                                            {seatMap[index][rowindex][colIndex].split('C')[1]}\r\n                                                                        </div>\r\n                                                                        : (seatPlan.response.lockedSeats !== undefined && seatPlan.response.lockedSeats.includes(seatMap[index][rowindex][colIndex]) ?\r\n                                                                            <Tooltip title=\"Other user has locked this seat but payment is yet to be made\" aria-label=\"add\">\r\n                                                                                <div className='seat locked' key={seatMap[index][rowindex][colIndex]}\r\n                                                                                >\r\n                                                                                    {seatMap[index][rowindex][colIndex].split('C')[1]}\r\n                                                                                </div></Tooltip>\r\n                                                                            : <Tooltip title=\"Click to select this seat\" aria-label=\"add\">\r\n                                                                                <div className='seat' key={seatMap[index][rowindex][colIndex]}\r\n                                                                                    onClick={() => this.selectSeat(seatMap[index][rowindex][colIndex])}\r\n                                                                                >\r\n                                                                                    {seatMap[index][rowindex][colIndex].split('C')[1]}\r\n                                                                                </div></Tooltip>))\r\n\r\n                                                                )))}\r\n                                                    </div>))}\r\n                                            </div>\r\n                                        </CardContent>\r\n                                    ))}\r\n                                    <div style={{ margin: 10, display: 'flex', alignItems: \"center\", justifyContent: \"center\" }}>\r\n                                        <Button className='timebutton' disabled={this.state.selectedSeats.length === 0}\r\n                                            onClick={this.purchaseSeats}\r\n                                            variant='outlined'\r\n                                        >\r\n                                            Purchase - Rs {this.state.price}</Button>\r\n                                    </div>\r\n                                </Card>\r\n                                ) : <Redirect to={{\r\n                                    pathname: '/error',\r\n                                    state: {\r\n                                        exception: seatPlan.exception\r\n                                    }\r\n                                }} />)}\r\n                        </div >\r\n                    </div>)\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ selectedScreen, selectedTheater, seatPlan, selectedMovie }) => {\r\n    return { selectedScreen, seatPlan, selectedTheater, selectedMovie }\r\n}\r\n\r\nexport default compose(withStyles(styles), connect(mapStateToProps))(Screen)","C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\loading.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\screen.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\signupandforgotpwd\\Password.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\actions\\screen.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\containers\\ProtectedRoute.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\Loader.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\store\\reducers\\seatsAndPrice.js",[],"C:\\Users\\HP\\Desktop\\xcorps projects\\movie-booking-co\\src\\shared-components\\pageNotFound\\PageNotFound.js",[],{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","replacedBy":"256"},{"ruleId":"253","replacedBy":"257"},{"ruleId":"255","replacedBy":"258"},{"ruleId":"253","replacedBy":"259"},{"ruleId":"255","replacedBy":"260"},{"ruleId":"253","replacedBy":"261"},{"ruleId":"255","replacedBy":"262"},{"ruleId":"253","replacedBy":"263"},{"ruleId":"255","replacedBy":"264"},{"ruleId":"265","severity":1,"message":"266","line":4,"column":59,"nodeType":"267","messageId":"268","endLine":4,"endColumn":73},{"ruleId":"265","severity":1,"message":"269","line":10,"column":7,"nodeType":"267","messageId":"268","endLine":10,"endColumn":13},{"ruleId":"265","severity":1,"message":"269","line":211,"column":7,"nodeType":"267","messageId":"268","endLine":211,"endColumn":13},{"ruleId":"265","severity":1,"message":"269","line":228,"column":7,"nodeType":"267","messageId":"268","endLine":228,"endColumn":13},{"ruleId":"253","replacedBy":"270"},{"ruleId":"255","replacedBy":"271"},{"ruleId":"253","replacedBy":"272"},{"ruleId":"255","replacedBy":"273"},{"ruleId":"265","severity":1,"message":"274","line":24,"column":16,"nodeType":"267","messageId":"268","endLine":24,"endColumn":24},{"ruleId":"275","severity":1,"message":"276","line":321,"column":19,"nodeType":"277","endLine":325,"endColumn":21},{"ruleId":"265","severity":1,"message":"278","line":19,"column":30,"nodeType":"267","messageId":"268","endLine":19,"endColumn":45},{"ruleId":"265","severity":1,"message":"279","line":19,"column":47,"nodeType":"267","messageId":"268","endLine":19,"endColumn":66},{"ruleId":"265","severity":1,"message":"280","line":15,"column":9,"nodeType":"267","messageId":"268","endLine":15,"endColumn":16},{"ruleId":"265","severity":1,"message":"281","line":38,"column":17,"nodeType":"267","messageId":"268","endLine":38,"endColumn":24},{"ruleId":"265","severity":1,"message":"278","line":8,"column":22,"nodeType":"267","messageId":"268","endLine":8,"endColumn":37},{"ruleId":"265","severity":1,"message":"279","line":8,"column":39,"nodeType":"267","messageId":"268","endLine":8,"endColumn":58},"no-native-reassign",["282"],"no-negated-in-lhs",["283"],["282"],["283"],["282"],["283"],["282"],["283"],["282"],["283"],"no-unused-vars","'setShowTimings' is defined but never used.","Identifier","unusedVar","'reqObj' is assigned a value but never used.",["282"],["283"],["282"],["283"],"'Redirect' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'buttonAvailable' is defined but never used.","'buttonAvailableText' is defined but never used.","'classes' is assigned a value but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]